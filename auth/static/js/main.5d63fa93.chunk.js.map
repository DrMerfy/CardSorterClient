{"version":3,"sources":["../../../server/flaskr/public/card_sorter/auth/src/static/StatusEnum.js","../../../server/flaskr/public/card_sorter/auth/src/enviroment.js","../../../server/flaskr/public/card_sorter/auth/src/actions/api.js","../../../server/flaskr/public/card_sorter/auth/src/actions/loginAction.js","../../../server/flaskr/public/card_sorter/auth/src/localization/en-us.js","../../../server/flaskr/public/card_sorter/auth/src/localization/LocalizedText.js","../../../server/flaskr/public/card_sorter/auth/src/elements/components/Login.jsx","../../../server/flaskr/public/card_sorter/auth/src/elements/containers/LoginContainer.jsx","../../../server/flaskr/public/card_sorter/auth/src/pages/LoginPage.js","../../../server/flaskr/public/card_sorter/auth/src/actions/registerAction.js","../../../server/flaskr/public/card_sorter/auth/src/elements/components/Register.jsx","../../../server/flaskr/public/card_sorter/auth/src/elements/containers/RegisterContainer.jsx","../../../server/flaskr/public/card_sorter/auth/src/pages/RegisterPage.js","../../../server/flaskr/public/card_sorter/auth/src/reducers/indexReducer.js","../../../server/flaskr/public/card_sorter/auth/src/reducers/loginReducer.js","../../../server/flaskr/public/card_sorter/auth/src/reducers/registerReducer.js","../../../server/flaskr/public/card_sorter/auth/src/reducers/stateSchema.js","../../../server/flaskr/public/card_sorter/auth/src/serviceWorker.js","../../../server/flaskr/public/card_sorter/auth/src/index.js","../../../server/flaskr/public/card_sorter/auth/src/Store.js"],"names":["IS_SENDING","SUCCESS","enviroment","exportString","env","CHANGE_USERNAME","CHANGE_PASSWORD","CLEAR_CREDENTIALS","CLEAR_USERNAME_ERROR","CLEAR_PASSWORD_ERROR","SENDING_CREDENTIALS","clearUsernameError","type","payload","error","clearPasswordError","sendingCredentials","status","response","location","sendCredentials","username","password","dispatch","StatusEnum","fetch","api","method","headers","Content-Type","body","JSON","stringify","then","json","document","cookie","auth_token","en_us","addAPassword","addAnEmail","addAnUsername","email","emailAlreadyInUse","forgotYourPassword","hiAgain","hiThere","login","register","signUp","usernameAlreadyInUse","usernameNotFound","wrongPassword","localization_LocalizedText","locale","this","text","enUS","Login","_ref","onUsernameChange","onPasswordChange","onForgot","onLogin","onRegister","usernameError","passwordError","onErrorShow","onFormKeyPress","usernameErrorShowing","passwordErrorShowing","react_default","a","createElement","className","L","onKeyPress","e","onChange","placeholder","onClick","LoginContainer","connect","state","ownProps","target","value","loginActions","history","push","setTimeout","key","LoginPage","id","containers_LoginContainer","props","Component","CHANGE_EMAIL","CLEAR_EMAIL_ERROR","clearEmailError","Register","onEmailChange","onSignUp","onBack","emailError","emailErrorShowing","RegisterContainer","registerActions","RegisterPage","containers_RegisterContainer","app","combineReducers","arguments","length","undefined","action","Object","assign","newState","isSending","window","replace","message","stateSchema","Boolean","hostname","match","store","middleware","thunkMiddleware","logger","createStore","initialState","applyMiddleware","apply","localizedText","initialize","subscribe","unsuscribe","initializeStore","ReactDOM","render","es","react_router_dom","basename","react_router","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d63fa93.chunk.js","sourcesContent":["export const IS_FETCHING = 'IS_FETCHING';\nexport const IS_SENDING = 'IS_SENDING';\nexport const DID_INVALIDATE = 'DID_INVALIDATE';\nexport const SUCCESS = 'SUCCESS';\nexport const FAILURE = 'FAILURE';","export default 'PRODUCTION';\n// export default 'DEV';\n","import env from '../enviroment';\n\nlet exportString;\nif (env === 'PRODUCTION') {\n  exportString = 'http://83.212.97.237:8090';\n} else {\n  exportString = 'http://127.0.0.1:5000';\n}\n\nexport default exportString;\n","import fetch from 'cross-fetch';\nimport * as StatusEnum from '../static/StatusEnum';\nimport api from './api';\n\nexport const CHANGE_USERNAME = 'CHANGE_USERNAME';\nexport const CHANGE_PASSWORD = 'CHANGE_PASSWORD';\nexport const CLEAR_CREDENTIALS = 'CLEAR_CREDENTIALS';\nexport const CLEAR_USERNAME_ERROR = 'CLEAR_USERNAME_ERROR';\nexport const CLEAR_PASSWORD_ERROR = 'CLEAR_PASSWORD_ERROR';\n\n\nexport const SENDING_CREDENTIALS = 'SEND_CREDENTIALS';\n\n/**\n * Changes the username in the login screen.\n * @param {String} username\n * @return {JSON} the action.\n */\nexport function changeUsername(username) {\n  return {\n    type: CHANGE_USERNAME,\n    payload: {\n      username: username,\n    },\n    error: false,\n  };\n}\n\n/**\n * Changes the password in the login screen.\n * @param {String} password\n * @return {JSON} the action.\n */\nexport function changePassword(password) {\n  return {\n    type: CHANGE_PASSWORD,\n    payload: {\n      password: password,\n    },\n    error: false,\n  };\n}\n\n/**\n * Clears the credentials of the login page.\n * @return {JSON} the action.\n */\nexport function clearCredentials() {\n  return {\n    type: CLEAR_CREDENTIALS,\n    payload: {},\n    error: false,\n  };\n}\n\n/**\n * Clears the username error field.\n * @return {JSON} the action.\n */\nexport function clearUsernameError() {\n  return {\n    type: CLEAR_USERNAME_ERROR,\n    payload: {\n    },\n    error: false,\n  };\n}\n\n/**\n * Clears the password error field.\n * @return {JSON} the action.\n */\nexport function clearPasswordError() {\n  return {\n    type: CLEAR_PASSWORD_ERROR,\n    payload: {\n    },\n    error: false,\n  };\n}\n\n/**\n * Async function that caries the data send to the server.\n * @param {StatusEnum} status\n * @param {JSON} response\n * @param {Error} error\n * @return {JSON} the action.\n */\nexport function sendingCredentials(status, response, error) {\n  return {\n    type: SENDING_CREDENTIALS,\n    payload: {\n      status: status,\n      location: response,\n    },\n    error: error,\n  };\n}\n\n/* Thunk actions */\n\n/**\n * Sends the credentials to the server.\n * @param {String} username\n * @param {String} password\n * @return {func}\n */\nexport function sendCredentials(username, password) {\n  return function(dispatch) {\n    dispatch(sendingCredentials(StatusEnum.IS_SENDING));\n    fetch(api+'/user_endpoint', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        'username': username,\n        'password': password,\n      }),\n    })\n        .then(\n            (response) => response.json().then((json) => {\n              // delete previous auth token\n              document.cookie\n                = 'auth_token= ;expires = Thu, 01 Jan 1970 00:00:00 GMT';\n              // append the new one\n              document.cookie = 'auth_token='+json.auth_token+'; path=/';\n              dispatch(sendingCredentials(\n                  StatusEnum.SUCCESS, json.location, json.error));\n            })\n        );\n  };\n}\n","export default {\n  addAPassword: 'add a password',\n  addAnEmail: 'add an email',\n  addAnUsername: 'add an username',\n  email: 'email',\n  emailAlreadyInUse: 'this email is already in use',\n  forgotYourPassword: 'forgot your password?',\n  hiAgain: 'hi again!',\n  hiThere: 'hi there!',\n  login: 'log in',\n  password: 'password',\n  register: 'register',\n  signUp: 'sign up',\n  username: 'username',\n  usernameAlreadyInUse: 'this username is already in use',\n  usernameNotFound: 'username not found',\n  wrongPassword: 'wrong password',\n};\n","import enUS from './en-us';\n\n/**\n * Holds the proper localized text for usage in the UI.\n */\nclass LocalizedText {\n  /**\n   *\n   * @param {String} locale supported locales:\n   * - 'en-us' : English - United States\n   */\n  initialize(locale) {\n    switch (locale) {\n      default: {\n        this.text = enUS;\n      }\n    }\n  }\n};\n\nexport default new LocalizedText();\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport L from '../../localization/LocalizedText';\n\nconst Login = ({onUsernameChange, onPasswordChange, onForgot,\n  onLogin, onRegister, username, password, usernameError, passwordError,\n  onErrorShow, onFormKeyPress}) => {\n  if (usernameError) {\n    onErrorShow.usernameErrorShowing();\n  }\n  if (passwordError) {\n    onErrorShow.passwordErrorShowing();\n  }\n  return (\n    <div className=\"container\">\n      <p>{L.text.hiAgain}</p>\n      <form onKeyPress={(e) => onFormKeyPress(e, username, password)}>\n        <div className=\"error-holder\">\n          <input type=\"text\" className=\"username\" onChange={onUsernameChange}\n            placeholder={L.text.username}/>\n          {\n            usernameError &&\n            <div className=\"error-message\"><p>{usernameError}</p></div>\n          }\n        </div>\n\n        <div className=\"error-holder\">\n          <input type=\"password\" className=\"password last\"\n            onChange={onPasswordChange} placeholder={L.text.password}/>\n          {\n            passwordError &&\n            <div className=\"error-message\"><p>{passwordError}</p></div>\n          }\n        </div>\n\n        <button type=\"button\" className=\"reset unavailable\"\n          onClick={onForgot}>{L.text.forgotYourPassword}</button>\n\n        <button type=\"button\" className=\"action login\"\n          onClick={() => onLogin(username, password)}>\n          <p>{L.text.login}</p>\n        </button>\n      </form>\n\n      <button className=\"register\" onClick={onRegister}>\n        {L.text.register}\n      </button>\n    </div>\n  );\n};\n\nLogin.propTypes = {\n  onUsernameChange: PropTypes.func.isRequired,\n  onPasswordChange: PropTypes.func.isRequired,\n  onForgot: PropTypes.func.isRequired,\n  onLogin: PropTypes.func.isRequired,\n  onRegister: PropTypes.func.isRequired,\n  username: PropTypes.string,\n  password: PropTypes.string,\n  usernameError: PropTypes.string,\n  passwordError: PropTypes.string,\n  onErrorShow: PropTypes.object.isRequired,\n};\n\nexport default Login;\n","import {connect} from 'react-redux';\n\nimport * as loginActions from '../../actions/loginAction';\nimport Login from '../components/Login.jsx';\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.login.username,\n    password: state.login.password,\n    usernameError: state.login.usernameError,\n    passwordError: state.login.passwordError,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onUsernameChange: (e) => {\n      const username = e.target.value;\n      dispatch(loginActions.changeUsername(username));\n    },\n    onPasswordChange: (e) => {\n      const password = e.target.value;\n      dispatch(loginActions.changePassword(password));\n    },\n    onForgot: () => {\n\n    },\n    onLogin: (username, password) => {\n      dispatch(loginActions.clearUsernameError());\n      dispatch(loginActions.clearPasswordError());\n      dispatch(loginActions.sendCredentials(username, password));\n    },\n    onRegister: () => {\n      dispatch(loginActions.clearCredentials());\n      ownProps.history.push('./register');\n    },\n    onErrorShow: {\n      // Clear the errors after some time\n      usernameErrorShowing: () => {\n        setTimeout(() => dispatch(loginActions.clearUsernameError()),\n            5000);\n      },\n      passwordErrorShowing: () => {\n        setTimeout(() => dispatch(loginActions.clearPasswordError()),\n            5000);\n      },\n    },\n    onFormKeyPress: (e, username, password) => {\n      if (e.key === 'Enter') {\n        dispatch(loginActions.clearUsernameError());\n        dispatch(loginActions.clearPasswordError());\n        dispatch(loginActions.sendCredentials(username, password));\n      }\n    },\n  };\n};\n\nconst LoginContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Login);\n\nexport default LoginContainer;\n","// eslint-disable-next-line no-unused-vars\nimport React, {Component} from 'react';\n\nimport '../App.css';\n// eslint-disable-next-line no-unused-vars\nimport LoginContainer from '../elements/containers/LoginContainer.jsx';\n\n/**\n * The login page.\n */\nclass LoginPage extends Component {\n  /**\n   * React render function.\n   * @return {ReactDOM}\n   */\n  render() {\n    return (\n      <main className=\"App\">\n        <div id=\"logo\"><p>CardSorter</p></div>\n        <LoginContainer history={this.props.history}/>\n      </main>\n    );\n  }\n}\n\nexport default LoginPage;\n","import * as StatusEnum from '../static/StatusEnum';\nimport api from './api';\n\nexport const CHANGE_USERNAME = 'CHANGE_USERNAME';\nexport const CHANGE_PASSWORD = 'CHANGE_PASSWORD';\nexport const CHANGE_EMAIL = 'CHANGE_EMAIL';\nexport const CLEAR_CREDENTIALS = 'CLEAR_CREDENTIALS';\nexport const CLEAR_USERNAME_ERROR = 'CLEAR_USERNAME_ERROR';\nexport const CLEAR_PASSWORD_ERROR = 'CLEAR_PASSWORD_ERROR';\nexport const CLEAR_EMAIL_ERROR = 'CLEAR_EMAIL_ERROR';\n\nexport const SENDING_CREDENTIALS = 'SENDING_CREDENTIALS';\n\n/**\n * Changes the username in the register screen.\n * @param {String} username\n * @return {JSON} the action.\n */\nexport function changeUsername(username) {\n  return {\n    type: CHANGE_USERNAME,\n    payload: {\n      username: username,\n    },\n    error: false,\n  };\n}\n\n/**\n * Changes the password in the register screen.\n * @param {String} password\n * @return {JSON} the action.\n */\nexport function changePassword(password) {\n  return {\n    type: CHANGE_PASSWORD,\n    payload: {\n      password: password,\n    },\n    error: false,\n  };\n}\n\n/**\n * Changes the email in the register screen.\n * @param {String} email\n * @return {JSON} the action.\n */\nexport function changeEmail(email) {\n  return {\n    type: CHANGE_EMAIL,\n    payload: {\n      email: email,\n    },\n    error: false,\n  };\n}\n\n/**\n * Clears the credentials of the register page.\n * @return {JSON} the action.\n */\nexport function clearCredentials() {\n  return {\n    type: CLEAR_CREDENTIALS,\n    payload: {},\n    error: false,\n  };\n}\n\n/**\n * Clears the username error field.\n * @return {JSON} the action.\n */\nexport function clearUsernameError() {\n  return {\n    type: CLEAR_USERNAME_ERROR,\n    payload: {\n    },\n    error: false,\n  };\n}\n\n/**\n * Clears the username error field.\n * @return {JSON} the action.\n */\nexport function clearPasswordError() {\n  return {\n    type: CLEAR_PASSWORD_ERROR,\n    payload: {\n    },\n    error: false,\n  };\n}\n\n/**\n * Clears the email error field.\n * @return {JSON} the action.\n */\nexport function clearEmailError() {\n  return {\n    type: CLEAR_EMAIL_ERROR,\n    payload: {\n    },\n    error: false,\n  };\n}\n\n/**\n * Async function that caries the data send to the server.\n * @param {StatusEnum} status\n * @param {JSON} response\n * @param {Error} error\n * @return {JSON} the action.\n */\nexport function sendingCredentials(status, response, error) {\n  return {\n    type: SENDING_CREDENTIALS,\n    payload: {\n      status: status,\n      location: response,\n    },\n    error: error,\n  };\n}\n\n/* Thunk actions */\n\n/**\n * Sends the credentials to the server.\n * @param {String} username\n * @param {String} password\n * @param {String} email\n * @return {func}\n */\nexport function sendCredentials(username, password, email) {\n  return function(dispatch) {\n    dispatch(sendingCredentials(StatusEnum.IS_SENDING));\n    fetch(api+'/user_endpoint?register=true', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        'username': username,\n        'password': password,\n        'email': email,\n      }),\n    })\n        .then(\n            (response) => response.json().then((json) => {\n              // delete previous auth token\n              document.cookie\n                = 'auth_token= ;expires = Thu, 01 Jan 1970 00:00:00 GMT';\n              // append the new one\n              document.cookie = 'auth_token='+json.auth_token+'; path=/';\n              dispatch(sendingCredentials(\n                  StatusEnum.SUCCESS, json.location, json.error));\n            })\n        );\n  };\n}\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport L from '../../localization/LocalizedText';\n\nconst Register = ({onUsernameChange, onPasswordChange, onEmailChange,\n  onSignUp, onBack, username, password, email, usernameError,\n  passwordError, emailError, onErrorShow, onFormKeyPress}) => {\n  if (usernameError) {\n    onErrorShow.usernameErrorShowing();\n  }\n  if (passwordError) {\n    onErrorShow.passwordErrorShowing();\n  }\n  if (emailError) {\n    onErrorShow.emailErrorShowing();\n  }\n  return (\n    <div className=\"container\">\n      <p>{L.text.hiThere}</p>\n      <button className=\"back\" onClick={onBack}></button>\n      <form onKeyPress={(e) => onFormKeyPress(e, username, password, email)}>\n        <div className=\"error-holder\">\n          <input type=\"text\" className=\"username\" onChange={onUsernameChange}\n            placeholder={L.text.username}/>\n          {\n            usernameError &&\n            <div className=\"error-message\"><p>{usernameError}</p></div>\n          }\n        </div>\n        <div className=\"error-holder\">\n          <input type=\"password\" className=\"password\"\n            onChange={onPasswordChange} placeholder={L.text.password}/>\n          {\n            passwordError &&\n            <div className=\"error-message\"><p>{passwordError}</p></div>\n          }\n        </div>\n        \n        <div className=\"error-holder\">\n          <input type=\"email\" className=\"email last\" onChange={onEmailChange}\n            placeholder={L.text.email}/>\n          {\n            emailError &&\n            <div className=\"error-message\"><p>{emailError}</p></div>\n          }\n        </div>\n        <button type=\"button\" className=\"action signup\"\n          onClick={() => onSignUp(username, password, email)}>\n          <p>{L.text.signUp}</p></button>\n      </form>\n    </div>\n  );\n};\n\nRegister.propTypes = {\n  onUsernameChange: PropTypes.func.isRequired,\n  onPasswordChange: PropTypes.func.isRequired,\n  onEmailChange: PropTypes.func.isRequired,\n  onSignUp: PropTypes.func.isRequired,\n  onBack: PropTypes.func.isRequired,\n  username: PropTypes.string,\n  password: PropTypes.string,\n  email: PropTypes.string,\n  usernameError: PropTypes.string,\n  emailError: PropTypes.string,\n  onErrorShow: PropTypes.object.isRequired,\n};\n\nexport default Register;\n","import {connect} from 'react-redux';\n\nimport * as registerActions from '../../actions/registerAction';\nimport Register from '../components/Register.jsx';\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.register.username,\n    password: state.register.password,\n    email: state.register.email,\n    usernameError: state.register.usernameError,\n    passwordError: state.register.passwordError,\n    emailError: state.register.emailError,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onUsernameChange: (e) => {\n      const username = e.target.value;\n      dispatch(registerActions.clearUsernameError());\n      dispatch(registerActions.changeUsername(username));\n    },\n    onPasswordChange: (e) => {\n      const password = e.target.value;\n      dispatch(registerActions.clearPasswordError());\n      dispatch(registerActions.changePassword(password));\n    },\n    onEmailChange: (e) => {\n      const email = e.target.value;\n      dispatch(registerActions.clearEmailError());\n      dispatch(registerActions.changeEmail(email));\n    },\n    onSignUp: (username, password, email) => {\n      dispatch(registerActions.clearUsernameError());\n      dispatch(registerActions.clearPasswordError());\n      dispatch(registerActions.clearEmailError());\n      dispatch(registerActions.sendCredentials(username, password, email));\n    },\n    onBack: () => {\n      dispatch(registerActions.clearCredentials());\n      ownProps.history.push('/');\n    },\n    onErrorShow: {\n      // Clear the errors after some time\n      usernameErrorShowing: () => {\n        setTimeout(() => dispatch(registerActions.clearUsernameError()),\n            5000);\n      },\n      passwordErrorShowing: () => {\n        setTimeout(() => dispatch(registerActions.clearPasswordError()),\n            5000);\n      },\n      emailErrorShowing: () => {\n        setTimeout(() => dispatch(registerActions.clearEmailError()),\n            5000);\n      },\n    },\n    onFormKeyPress: (e, username, password, email) => {\n      if (e.key === 'Enter') {\n        dispatch(registerActions.clearUsernameError());\n        dispatch(registerActions.clearPasswordError());\n        dispatch(registerActions.clearEmailError());\n        dispatch(registerActions.sendCredentials(username, password, email));\n      }\n    },\n  };\n};\n\nconst RegisterContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Register);\n\nexport default RegisterContainer;\n","// eslint-disable-next-line no-unused-vars\nimport React, {Component} from 'react';\n\nimport '../App.css';\n// eslint-disable-next-line no-unused-vars\nimport RegisterContainer from '../elements/containers/RegisterContainer.jsx';\n\n/**\n * The register page.\n */\nclass RegisterPage extends Component {\n  /**\n   * React render function.\n   * @return {ReactDOM}\n   */\n  render() {\n    return (\n      <main className=\"App\">\n        <span id=\"logo\"><p>CardSorter</p></span>\n        <RegisterContainer history={this.props.history}/>\n      </main>\n    );\n  }\n}\n\nexport default RegisterPage;\n","import {combineReducers} from 'redux';\n\nimport loginReducer from './loginReducer';\nimport registerReducer from './registerReducer';\n\nconst app = combineReducers({\n  login: loginReducer,\n  register: registerReducer,\n});\n\nexport default app;\n","import * as loginActions from '../actions/loginAction';\nimport * as StatusEnum from '../static/StatusEnum';\n\nimport L from '../localization/LocalizedText';\n\n/**\n *\n * @param {loginState} state\n * @param {loginAction} action\n * @return {ReduxState} the new (reduced) state.\n */\nexport default function loginReducer(state={}, action) {\n  switch (action.type) {\n    case loginActions.CHANGE_USERNAME: {\n      return Object.assign({}, state, {\n        'username': action.payload.username,\n      });\n    }\n    case loginActions.CHANGE_PASSWORD: {\n      return Object.assign({}, state, {\n        'password': action.payload.password,\n      });\n    }\n    case loginActions.CLEAR_CREDENTIALS: {\n      return Object.assign({}, state, {\n        'username': undefined,\n        'password': undefined,\n      });\n    }\n    case loginActions.CLEAR_USERNAME_ERROR: {\n      return Object.assign({}, state, {\n        'usernameError': undefined,\n      });\n    }\n    case loginActions.CLEAR_PASSWORD_ERROR: {\n      return Object.assign({}, state, {\n        'passwordError': undefined,\n      });\n    }\n    case loginActions.SENDING_CREDENTIALS: {\n      const newState = Object.assign({}, state, {\n        'isSending': action.payload.status !== StatusEnum.SUCCESS,\n      });\n      if (action.payload.status === StatusEnum.SUCCESS) {\n        if (action.payload.location) {\n          // Redirect to main page\n          window.location.replace(action.payload.location);\n          return newState;\n        }\n        if (action.error.message === 'USERNAME NOT FOUND') {\n          newState.usernameError = L.text.usernameNotFound;\n        } else\n        if (action.error.message === 'INVALID PASSWORD') {\n          newState.passwordError = L.text.wrongPassword;\n        } else\n        if (action.error.message === 'EMPTY USERNAME') {\n          newState.usernameError = L.text.addAnUsername;\n        } else\n        if (action.error.message === 'EMPTY PASSWORD') {\n          newState.passwordError = L.text.addAPassword;\n        }\n      }\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","import * as registerActions from '../actions/registerAction';\nimport * as StatusEnum from '../static/StatusEnum';\n\nimport L from '../localization/LocalizedText';\n\n/**\n *\n * @param {registerState} state\n * @param {registerAction} action\n * @return {ReduxState} the new (reduced) state.\n */\nexport default function registerReducer(state={}, action) {\n  switch (action.type) {\n    case registerActions.CHANGE_USERNAME: {\n      return Object.assign({}, state, {\n        'username': action.payload.username,\n      });\n    }\n    case registerActions.CHANGE_PASSWORD: {\n      return Object.assign({}, state, {\n        'password': action.payload.password,\n      });\n    }\n    case registerActions.CHANGE_EMAIL: {\n      return Object.assign({}, state, {\n        'email': action.payload.email,\n      });\n    }\n    case registerActions.CLEAR_CREDENTIALS: {\n      return Object.assign({}, state, {\n        'username': undefined,\n        'password': undefined,\n        'email': undefined,\n      });\n    }\n    case registerActions.CLEAR_USERNAME_ERROR: {\n      return Object.assign({}, state, {\n        'usernameError': undefined,\n      });\n    }\n    case registerActions.CLEAR_PASSWORD_ERROR: {\n      return Object.assign({}, state, {\n        'passwordError': undefined,\n      });\n    }\n    case registerActions.CLEAR_EMAIL_ERROR: {\n      return Object.assign({}, state, {\n        'emailError': undefined,\n      });\n    }\n    case registerActions.SENDING_CREDENTIALS: {\n      const newState = Object.assign({}, state, {\n        'isSending': action.payload.status !== StatusEnum.SUCCESS,\n      });\n      if (action.payload.status === StatusEnum.SUCCESS) {\n        if (action.payload.location) {\n          // Redirect to main page\n          window.location.replace(action.payload.location);\n          return newState;\n        }\n        if (action.error.message === 'DUPLICATE USERNAME') {\n          newState.usernameError = L.text.usernameAlreadyInUse;\n        } else\n        if (action.error.message === 'DUPLICATE EMAIL') {\n          newState.emailError = L.text.emailAlreadyInUse;\n        } else\n        if (action.error.message === 'EMPTY USERNAME') {\n          newState.usernameError = L.text.addAnUsername;\n        } else\n        if (action.error.message === 'EMPTY PASSWORD') {\n          newState.passwordError = L.text.addAPassword;\n        } else\n        if (action.error.message === 'EMPTY EMAIL') {\n          newState.emailError = L.text.addAnEmail;\n        }\n      }\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","export default {\n  login: {\n    username: undefined,\n    password: undefined,\n    isSending: undefined,\n    usernameError: undefined,\n    passwordError: undefined,\n  },\n  register: {\n    username: undefined,\n    password: undefined,\n    email: undefined,\n    isSending: undefined,\n    usernameError: undefined,\n    passwordError: undefined,\n    emailError: undefined,\n  },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport initializeStore from './Store';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = initializeStore();\nReactDOM.render(\n    <Provider store={store}>\n      <Router basename={'/auth'}>\n        <Route exact path='/' component={LoginPage}/>\n        <Route path='/register' component={RegisterPage}/>\n      </Router>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {applyMiddleware, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport env from './enviroment';\n\nimport app from './reducers/indexReducer';\nimport initialState from './reducers/stateSchema';\nimport localizedText from './localization/LocalizedText';\n\n/**\n * @return {Store}\n */\nexport default function initializeStore() {\n  const middleware = [thunkMiddleware];\n  if (env !== 'PRODUCTION') {\n    middleware.push(logger);\n  }\n\n  const store = createStore(app, initialState, applyMiddleware(\n      ...middleware\n  ));\n\n  localizedText.initialize('en-us');\n\n  const unsuscribe = store.subscribe(() => {});\n\n  unsuscribe();\n  return store;\n}\n"],"sourceRoot":""}