{"version":3,"sources":["static/StatusEnum.js","actions/api.js","actions/loginAction.js","localization/en-us.js","localization/LocalizedText.js","elements/components/Login.jsx","elements/containers/LoginContainer.jsx","pages/LoginPage.js","actions/registerAction.js","elements/components/Register.jsx","elements/containers/RegisterContainer.jsx","pages/RegisterPage.js","reducers/indexReducer.js","reducers/loginReducer.js","reducers/registerReducer.js","reducers/stateSchema.js","serviceWorker.js","index.js","Store.js"],"names":["IS_SENDING","SUCCESS","api","CHANGE_USERNAME","CHANGE_PASSWORD","CLEAR_CREDENTIALS","CLEAR_USERNAME_ERROR","CLEAR_PASSWORD_ERROR","SENDING_CREDENTIALS","clearUsernameError","type","payload","error","clearPasswordError","sendingCredentials","status","response","location","en_us","email","forgotYourPassword","hiAgain","hiThere","login","password","register","signUp","username","localization_LocalizedText","locale","this","text","enUS","Login","_ref","onUsernameChange","onPasswordChange","onForgot","onLogin","onRegister","usernameError","passwordError","onErrorShow","usernameErrorShowing","passwordErrorShowing","react_default","a","createElement","className","L","onChange","placeholder","onClick","LoginContainer","connect","state","dispatch","ownProps","e","target","value","loginActions","StatusEnum","fetch","method","headers","Content-Type","body","JSON","stringify","then","json","document","cookie","auth_token","history","push","setTimeout","LoginPage","containers_LoginContainer","props","Component","CHANGE_EMAIL","CLEAR_EMAIL_ERROR","clearEmailError","Register","onEmailChange","onSignUp","onBack","emailError","emailErrorShowing","RegisterContainer","registerActions","RegisterPage","containers_RegisterContainer","app","combineReducers","arguments","length","undefined","action","Object","assign","newState","isSending","window","replace","message","stateSchema","Boolean","hostname","match","store","createStore","initialState","applyMiddleware","thunkMiddleware","logger","localizedText","initialize","subscribe","unsuscribe","initializeStore","ReactDOM","render","es","react_router_dom","basename","react_router","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb657215.chunk.js","sourcesContent":["export const IS_FETCHING = 'IS_FETCHING';\nexport const IS_SENDING = 'IS_SENDING';\nexport const DID_INVALIDATE = 'DID_INVALIDATE';\nexport const SUCCESS = 'SUCCESS';\nexport const FAILURE = 'FAILURE';","export default 'http://83.212.97.237:8090';\n","import fetch from 'cross-fetch';\nimport * as StatusEnum from '../static/StatusEnum';\nimport api from './api';\n\nexport const CHANGE_USERNAME = 'CHANGE_USERNAME';\nexport const CHANGE_PASSWORD = 'CHANGE_PASSWORD';\nexport const CLEAR_CREDENTIALS = 'CLEAR_CREDENTIALS';\nexport const CLEAR_USERNAME_ERROR = 'CLEAR_USERNAME_ERROR';\nexport const CLEAR_PASSWORD_ERROR = 'CLEAR_PASSWORD_ERROR';\n\n\nexport const SENDING_CREDENTIALS = 'SEND_CREDENTIALS';\n\n/**\n * Changes the username in the login screen.\n * @param {String} username\n * @return {JSON} the action.\n */\nexport function changeUsername(username) {\n  return {\n    type: CHANGE_USERNAME,\n    payload: {\n      username: username,\n    },\n    error: false,\n  };\n}\n\n/**\n * Changes the password in the login screen.\n * @param {String} password\n * @return {JSON} the action.\n */\nexport function changePassword(password) {\n  return {\n    type: CHANGE_PASSWORD,\n    payload: {\n      password: password,\n    },\n    error: false,\n  };\n}\n\n/**\n * Clears the credentials of the login page.\n * @return {JSON} the action.\n */\nexport function clearCredentials() {\n  return {\n    type: CLEAR_CREDENTIALS,\n    payload: {},\n    error: false,\n  };\n}\n\n/**\n * Clears the username error field.\n * @return {JSON} the action.\n */\nexport function clearUsernameError() {\n  return {\n    type: CLEAR_USERNAME_ERROR,\n    payload: {\n    },\n    error: false,\n  };\n}\n\n/**\n * Clears the password error field.\n * @return {JSON} the action.\n */\nexport function clearPasswordError() {\n  return {\n    type: CLEAR_PASSWORD_ERROR,\n    payload: {\n    },\n    error: false,\n  };\n}\n\n/**\n * Async function that caries the data send to the server.\n * @param {StatusEnum} status\n * @param {JSON} response\n * @param {Error} error\n * @return {JSON} the action.\n */\nexport function sendingCredentials(status, response, error) {\n  return {\n    type: SENDING_CREDENTIALS,\n    payload: {\n      status: status,\n      location: response,\n    },\n    error: error,\n  };\n}\n\n/* Thunk actions */\n\n/**\n * Sends the credentials to the server.\n * @param {String} username\n * @param {String} password\n * @return {func}\n */\nexport function sendCredentials(username, password) {\n  return function(dispatch) {\n    dispatch(sendingCredentials(StatusEnum.IS_SENDING));\n    fetch(api+'/user_endpoint', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        'username': username,\n        'password': password,\n      }),\n    })\n        .then(\n            (response) => response.json().then((json) => {\n              // delete previous auth token\n              document.cookie\n                = 'auth_token= ;expires = Thu, 01 Jan 1970 00:00:00 GMT';\n              // append the new one\n              document.cookie = 'auth_token='+json.auth_token+';';\n              dispatch(sendingCredentials(\n                  StatusEnum.SUCCESS, json.location, json.error));\n            })\n        );\n  };\n}\n","export default {\n  email: 'email',\n  forgotYourPassword: 'forgot your password?',\n  hiAgain: 'hi again!',\n  hiThere: 'hi there!',\n  login: 'log in',\n  password: 'password',\n  register: 'register',\n  signUp: 'sign up',\n  username: 'username',\n};\n","import enUS from './en-us';\n\n/**\n * Holds the proper localized text for usage in the UI.\n */\nclass LocalizedText {\n  /**\n   *\n   * @param {String} locale supported locales:\n   * - 'en-us' : English - United States\n   */\n  initialize(locale) {\n    switch (locale) {\n      default: {\n        this.text = enUS;\n      }\n    }\n  }\n};\n\nexport default new LocalizedText();\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport L from '../../localization/LocalizedText';\n\nconst Login = ({onUsernameChange, onPasswordChange, onForgot,\n  onLogin, onRegister, username, password, usernameError, passwordError,\n  onErrorShow}) => {\n  if (usernameError) {\n    onErrorShow.usernameErrorShowing();\n  }\n  if (passwordError) {\n    onErrorShow.passwordErrorShowing();\n  }\n  return (\n    <div className=\"container\">\n      <p>{L.text.hiAgain}</p>\n      <form>\n        <div className=\"error-holder\">\n          <input type=\"text\" className=\"username\" onChange={onUsernameChange}\n            placeholder={L.text.username}/>\n          {\n            usernameError &&\n            <div className=\"error-message\"><p>{usernameError}</p></div>\n          }\n        </div>\n\n        <div className=\"error-holder\">\n          <input type=\"password\" className=\"password last\"\n            onChange={onPasswordChange} placeholder={L.text.password}/>\n          {\n            passwordError &&\n            <div className=\"error-message\"><p>{passwordError}</p></div>\n          }\n        </div>\n\n        <button type=\"button\" className=\"reset\"\n          onClick={onForgot}>{L.text.forgotYourPassword}</button>\n\n        <button type=\"button\" className=\"action login\"\n          onClick={() => onLogin(username, password)}>{L.text.login}</button>\n      </form>\n\n      <button className=\"register\"\n        onClick={onRegister}>{L.text.register}</button>\n    </div>\n  );\n};\n\nLogin.propTypes = {\n  onUsernameChange: PropTypes.func.isRequired,\n  onPasswordChange: PropTypes.func.isRequired,\n  onForgot: PropTypes.func.isRequired,\n  onLogin: PropTypes.func.isRequired,\n  onRegister: PropTypes.func.isRequired,\n  username: PropTypes.string,\n  password: PropTypes.string,\n  usernameError: PropTypes.string,\n  passwordError: PropTypes.string,\n  onErrorShow: PropTypes.object.isRequired,\n};\n\nexport default Login;\n","import {connect} from 'react-redux';\n\nimport * as loginActions from '../../actions/loginAction';\nimport Login from '../components/Login.jsx';\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.login.username,\n    password: state.login.password,\n    usernameError: state.login.usernameError,\n    passwordError: state.login.passwordError,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onUsernameChange: (e) => {\n      const username = e.target.value;\n      dispatch(loginActions.changeUsername(username));\n    },\n    onPasswordChange: (e) => {\n      const password = e.target.value;\n      dispatch(loginActions.changePassword(password));\n    },\n    onForgot: () => {\n\n    },\n    onLogin: (username, password) => {\n      dispatch(loginActions.clearUsernameError());\n      dispatch(loginActions.clearPasswordError());\n      dispatch(loginActions.sendCredentials(username, password));\n    },\n    onRegister: () => {\n      dispatch(loginActions.clearCredentials());\n      ownProps.history.push('./register');\n    },\n    onErrorShow: {\n      // Clear the errors after some time\n      usernameErrorShowing: () => {\n        setTimeout(() => dispatch(loginActions.clearUsernameError()),\n            5000);\n      },\n      passwordErrorShowing: () => {\n        setTimeout(() => dispatch(loginActions.clearPasswordError()),\n            5000);\n      },\n    },\n  };\n};\n\nconst LoginContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Login);\n\nexport default LoginContainer;\n","// eslint-disable-next-line no-unused-vars\nimport React, {Component} from 'react';\n\nimport '../App.css';\n// eslint-disable-next-line no-unused-vars\nimport LoginContainer from '../elements/containers/LoginContainer.jsx';\n\n/**\n * The login page.\n */\nclass LoginPage extends Component {\n  /**\n   * React render function.\n   * @return {ReactDOM}\n   */\n  render() {\n    return (\n      <main className=\"App\">\n        <LoginContainer history={this.props.history}/>\n      </main>\n    );\n  }\n}\n\nexport default LoginPage;\n","import * as StatusEnum from '../static/StatusEnum';\nimport api from './api';\n\nexport const CHANGE_USERNAME = 'CHANGE_USERNAME';\nexport const CHANGE_PASSWORD = 'CHANGE_PASSWORD';\nexport const CHANGE_EMAIL = 'CHANGE_EMAIL';\nexport const CLEAR_CREDENTIALS = 'CLEAR_CREDENTIALS';\nexport const CLEAR_USERNAME_ERROR = 'CLEAR_USERNAME_ERROR';\nexport const CLEAR_EMAIL_ERROR = 'CLEAR_EMAIL_ERROR';\n\nexport const SENDING_CREDENTIALS = 'SENDING_CREDENTIALS';\n\n/**\n * Changes the username in the register screen.\n * @param {String} username\n * @return {JSON} the action.\n */\nexport function changeUsername(username) {\n  return {\n    type: CHANGE_USERNAME,\n    payload: {\n      username: username,\n    },\n    error: false,\n  };\n}\n\n/**\n * Changes the password in the register screen.\n * @param {String} password\n * @return {JSON} the action.\n */\nexport function changePassword(password) {\n  return {\n    type: CHANGE_PASSWORD,\n    payload: {\n      password: password,\n    },\n    error: false,\n  };\n}\n\n/**\n * Changes the email in the register screen.\n * @param {String} email\n * @return {JSON} the action.\n */\nexport function changeEmail(email) {\n  return {\n    type: CHANGE_EMAIL,\n    payload: {\n      email: email,\n    },\n    error: false,\n  };\n}\n\n/**\n * Clears the credentials of the register page.\n * @return {JSON} the action.\n */\nexport function clearCredentials() {\n  return {\n    type: CLEAR_CREDENTIALS,\n    payload: {},\n    error: false,\n  };\n}\n\n/**\n * Clears the username error field.\n * @return {JSON} the action.\n */\nexport function clearUsernameError() {\n  return {\n    type: CLEAR_USERNAME_ERROR,\n    payload: {\n    },\n    error: false,\n  };\n}\n\n/**\n * Clears the email error field.\n * @return {JSON} the action.\n */\nexport function clearEmailError() {\n  return {\n    type: CLEAR_EMAIL_ERROR,\n    payload: {\n    },\n    error: false,\n  };\n}\n\n/**\n * Async function that caries the data send to the server.\n * @param {StatusEnum} status\n * @param {JSON} response\n * @param {Error} error\n * @return {JSON} the action.\n */\nexport function sendingCredentials(status, response, error) {\n  return {\n    type: SENDING_CREDENTIALS,\n    payload: {\n      status: status,\n      location: response,\n    },\n    error: error,\n  };\n}\n\n/* Thunk actions */\n\n/**\n * Sends the credentials to the server.\n * @param {String} username\n * @param {String} password\n * @param {String} email\n * @return {func}\n */\nexport function sendCredentials(username, password, email) {\n  return function(dispatch) {\n    dispatch(sendingCredentials(StatusEnum.IS_SENDING));\n    fetch(api+'/user_endpoint?register=true', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        'username': username,\n        'password': password,\n        'email': email,\n      }),\n    })\n        .then(\n            (response) => response.json().then((json) => {\n              // delete previous auth token\n              document.cookie\n                = 'auth_token= ;expires = Thu, 01 Jan 1970 00:00:00 GMT';\n              // append the new one\n              document.cookie = 'auth_token='+json.auth_token+';';\n              dispatch(sendingCredentials(\n                  StatusEnum.SUCCESS, json.location, json.error));\n            })\n        );\n  };\n}\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport L from '../../localization/LocalizedText';\n\nconst Register = ({onUsernameChange, onPasswordChange, onEmailChange,\n  onSignUp, onBack, username, password, email, usernameError, emailError,\n  onErrorShow}) => {\n  if (usernameError) {\n    onErrorShow.usernameErrorShowing();\n  }\n  if (emailError) {\n    onErrorShow.emailErrorShowing();\n  }\n  return (\n    <div className=\"container\">\n      <p>{L.text.hiThere}</p>\n      <button className=\"back\" onClick={onBack}></button>\n      <form>\n        <div className=\"error-holder\">\n          <input type=\"text\" className=\"username\" onChange={onUsernameChange}\n            placeholder={L.text.username}/>\n          {\n            usernameError &&\n            <div className=\"error-message\"><p>{usernameError}</p></div>\n          }\n        </div>\n        <input type=\"password\" className=\"password\" onChange={onPasswordChange}\n          placeholder={L.text.password}/>\n        <div className=\"error-holder\">\n          <input type=\"email\" className=\"email last\" onChange={onEmailChange}\n            placeholder={L.text.email}/>\n          {\n            emailError &&\n            <div className=\"error-message\"><p>{emailError}</p></div>\n          }\n        </div>\n        <button type=\"button\" className=\"action signup\"\n          onClick={() => onSignUp(username, password, email)}>\n          {L.text.signUp}</button>\n      </form>\n    </div>\n  );\n};\n\nRegister.propTypes = {\n  onUsernameChange: PropTypes.func.isRequired,\n  onPasswordChange: PropTypes.func.isRequired,\n  onEmailChange: PropTypes.func.isRequired,\n  onSignUp: PropTypes.func.isRequired,\n  onBack: PropTypes.func.isRequired,\n  username: PropTypes.string,\n  password: PropTypes.string,\n  email: PropTypes.string,\n  usernameError: PropTypes.string,\n  emailError: PropTypes.string,\n  onErrorShow: PropTypes.object.isRequired,\n};\n\nexport default Register;\n","import {connect} from 'react-redux';\n\nimport * as registerActions from '../../actions/registerAction';\nimport Register from '../components/Register.jsx';\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.register.username,\n    password: state.register.password,\n    email: state.register.email,\n    usernameError: state.register.usernameError,\n    emailError: state.register.emailError,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onUsernameChange: (e) => {\n      const username = e.target.value;\n      dispatch(registerActions.changeUsername(username));\n    },\n    onPasswordChange: (e) => {\n      const password = e.target.value;\n      dispatch(registerActions.changePassword(password));\n    },\n    onEmailChange: (e) => {\n      const email = e.target.value;\n      dispatch(registerActions.changeEmail(email));\n    },\n    onSignUp: (username, password, email) => {\n      dispatch(registerActions.clearUsernameError());\n      dispatch(registerActions.clearEmailError());\n      dispatch(registerActions.sendCredentials(username, password, email));\n    },\n    onBack: () => {\n      dispatch(registerActions.clearCredentials());\n      ownProps.history.push('/');\n    },\n    onErrorShow: {\n      // Clear the errors after some time\n      usernameErrorShowing: () => {\n        setTimeout(() => dispatch(registerActions.clearUsernameError()),\n            5000);\n      },\n      emailErrorShowing: () => {\n        setTimeout(() => dispatch(registerActions.clearEmailError()),\n            5000);\n      },\n    },\n  };\n};\n\nconst RegisterContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Register);\n\nexport default RegisterContainer;\n","// eslint-disable-next-line no-unused-vars\nimport React, {Component} from 'react';\n\nimport '../App.css';\n// eslint-disable-next-line no-unused-vars\nimport RegisterContainer from '../elements/containers/RegisterContainer.jsx';\n\n/**\n * The register page.\n */\nclass RegisterPage extends Component {\n  /**\n   * React render function.\n   * @return {ReactDOM}\n   */\n  render() {\n    return (\n      <main className=\"App\">\n        <RegisterContainer history={this.props.history}/>\n      </main>\n    );\n  }\n}\n\nexport default RegisterPage;\n","import {combineReducers} from 'redux';\n\nimport loginReducer from './loginReducer';\nimport registerReducer from './registerReducer';\n\nconst app = combineReducers({\n  login: loginReducer,\n  register: registerReducer,\n});\n\nexport default app;\n","import * as loginActions from '../actions/loginAction';\nimport * as StatusEnum from '../static/StatusEnum';\n\n/**\n *\n * @param {loginState} state\n * @param {loginAction} action\n * @return {ReduxState} the new (reduced) state.\n */\nexport default function loginReducer(state={}, action) {\n  switch (action.type) {\n    case loginActions.CHANGE_USERNAME: {\n      return Object.assign({}, state, {\n        'username': action.payload.username,\n      });\n    }\n    case loginActions.CHANGE_PASSWORD: {\n      return Object.assign({}, state, {\n        'password': action.payload.password,\n      });\n    }\n    case loginActions.CLEAR_CREDENTIALS: {\n      return Object.assign({}, state, {\n        'username': undefined,\n        'password': undefined,\n      });\n    }\n    case loginActions.CLEAR_USERNAME_ERROR: {\n      return Object.assign({}, state, {\n        'usernameError': undefined,\n      });\n    }\n    case loginActions.CLEAR_PASSWORD_ERROR: {\n      return Object.assign({}, state, {\n        'passwordError': undefined,\n      });\n    }\n    case loginActions.SENDING_CREDENTIALS: {\n      const newState = Object.assign({}, state, {\n        'isSending': action.payload.status !== StatusEnum.SUCCESS,\n      });\n      if (action.payload.status === StatusEnum.SUCCESS) {\n        if (action.payload.location) {\n          // Redirect to main page\n          window.location.replace(action.payload.location);\n          return newState;\n        }\n        if (action.error.message === 'USERNAME NOT FOUND') {\n          newState.usernameError = 'NOT FOUND';\n        } else\n        if (action.error.message === 'INVALID PASSWORD') {\n          newState.passwordError = 'INVALID';\n        }\n      }\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","import * as registerActions from '../actions/registerAction';\nimport * as StatusEnum from '../static/StatusEnum';\n\n/**\n *\n * @param {registerState} state\n * @param {registerAction} action\n * @return {ReduxState} the new (reduced) state.\n */\nexport default function registerReducer(state={}, action) {\n  switch (action.type) {\n    case registerActions.CHANGE_USERNAME: {\n      return Object.assign({}, state, {\n        'username': action.payload.username,\n      });\n    }\n    case registerActions.CHANGE_PASSWORD: {\n      return Object.assign({}, state, {\n        'password': action.payload.password,\n      });\n    }\n    case registerActions.CHANGE_EMAIL: {\n      return Object.assign({}, state, {\n        'email': action.payload.email,\n      });\n    }\n    case registerActions.CLEAR_CREDENTIALS: {\n      return Object.assign({}, state, {\n        'username': undefined,\n        'password': undefined,\n        'email': undefined,\n      });\n    }\n    case registerActions.CLEAR_USERNAME_ERROR: {\n      return Object.assign({}, state, {\n        'usernameError': undefined,\n      });\n    }\n    case registerActions.CLEAR_EMAIL_ERROR: {\n      return Object.assign({}, state, {\n        'emailError': undefined,\n      });\n    }\n    case registerActions.SENDING_CREDENTIALS: {\n      const newState = Object.assign({}, state, {\n        'isSending': action.payload.status !== StatusEnum.SUCCESS,\n      });\n      if (action.payload.status === StatusEnum.SUCCESS) {\n        if (action.payload.location) {\n          // Redirect to main page\n          window.location.replace(action.payload.location);\n          return newState;\n        }\n        if (action.error.message === 'DUPLICATE USERNAME') {\n          newState.usernameError = 'DUPLICATE';\n        } else\n        if (action.error.message === 'DUPLICATE EMAIL') {\n          newState.emailError = 'DUPLICATE';\n        }\n      }\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","export default {\n  login: {\n    username: undefined,\n    password: undefined,\n    isSending: undefined,\n    usernameError: undefined,\n    passwordError: undefined,\n  },\n  register: {\n    username: undefined,\n    password: undefined,\n    email: undefined,\n    isSending: undefined,\n    usernameError: undefined,\n    emailError: undefined,\n  },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport initializeStore from './Store';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = initializeStore();\nReactDOM.render(\n    <Provider store={store}>\n      <Router basename={'/auth'}>\n        <Route exact path='/' component={LoginPage}/>\n        <Route path='/register' component={RegisterPage}/>\n      </Router>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {applyMiddleware, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport app from './reducers/indexReducer';\nimport initialState from './reducers/stateSchema';\nimport localizedText from './localization/LocalizedText';\n\n/**\n * @return {Store}\n */\nexport default function initializeStore() {\n  const store = createStore(app, initialState, applyMiddleware(\n      thunkMiddleware,\n      logger));\n\n  localizedText.initialize('en-us');\n\n  const unsuscribe = store.subscribe(() => {});\n\n  unsuscribe();\n  return store;\n}\n"],"sourceRoot":""}