{"version":3,"sources":["icons/down-arrow-sketch.svg","icons/hello.svg","icons/thanks-icon.svg","icons/not-found.svg","staticContent/responseStatus.js","actions/categoryAction.js","actions/api.js","actions/uiAction.js","actions/cardAction.js","debug/Debugconsole.js","elements/Category.js","localization/en-us.js","localization/LocalizedText.js","elements/Card.js","staticContent/cards.js","reducers/indexReducer.js","reducers/cardReducer.js","reducers/categoriesReducer.js","reducers/containerReducer.js","reducers/uiReducer.js","reducers/boardState.js","staticContent/dragConstants.js","elements/components/CardItem.jsx","elements/components/List.jsx","helpers/cardParser.js","elements/containers/ListContainer.jsx","elements/components/CategoryItem.jsx","elements/components/Board.jsx","elements/containers/BoardContainer.jsx","elements/components/Header.jsx","elements/containers/HeaderContainer.jsx","elements/components/MessageScreen.jsx","elements/components/OnBoarding.jsx","elements/containers/OnBoardingContainer.jsx","App.jsx","serviceWorker.js","index.jsx","Store.js","icons/plus.svg"],"names":["module","exports","__webpack_require__","p","IS_FETCHING","IS_SENDING","SUCCESS","CREATE_CATEGORY","REMOVE_CATEGORY","RENAME_CATEGORY","NORMALIZE_CATEGORIES","api","SHOW_DESCRICTION","HIDE_ALL_DESCRIPTIONS","SHOW_TITLE_BOX","HIDE_ALL_BOXES","SAVE_STUDY_ID","SENDING_SORT","SAVE_THANKS_MESSAGE","RENDER_THANKS_MESSAGE","TOOGLE_ON_BOARDING","toogleOnBoarding","show","type","payload","showOnBoarding","error","hideAllTitleBoxes","sendingSort","status","response","sendSort","studyID","container","categories","dispatch","responseStatus","fetch","method","headers","Content-Type","body","JSON","stringify","then","json","message","ADD_CARD_CATEGORY","REMOVE_CARD_CATEGORY","ADD_CARD_CONTAINER","REMOVE_CARD_CONTAINER","REQUEST_CARDS","requestCards","fetchCards","saveStudyID","cardID","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","cards","Symbol","iterator","next","done","card","value","id","err","return","_len","arguments","length","args","Array","_key","console","log","debugConsole","Category","title","Object","classCallCheck","this","cardId","push","filter","en_us","clickToRename","studyNotFound","dropToAdd","dropToCreateCategory","localization_LocalizedText","locale","text","enUS","Card","description","staticContent_cards","app","combineReducers","state","action","cardActions","name","assign","notFound","categoryAction","categoryID","Date","now","category","addCard","newState","removeCard","hasOwnProperty","call","L","concat","toConsumableArray","x","ui","uiAction","showingDescription","changeTitle","thanksMessage","renderThanks","initialState","cardsSorted","categoriesCreated","itemTypes","DragSource","beginDrag","props","position","connect","monitor","connectDragSource","dragSource","isDragging","_ref","minimized","onClick","showDescription","classString","react_default","a","createElement","className","List","map","components_CardItem","key","parseCards","cardIDs","cardsArr","ListContainer","DropTarget","drop","getItem","onCardDrop","connectDropTarget","dropTarget","isOver","showTitleBox","onTitleClick","onTitleChange","onTitleFinish","descriptionID","defaultValue","onChange","e","onKeyPress","stopPropagation","src","plusImage","event","didDrop","onDrop","removeEmptyCategories","shallow","onCardClick","onCategTitleClick","changeTitleID","onCategTitleChange","onCategTitleFinish","components_CategoryItem","removeCardFromParent","cardPosition","cardAction","BoardContainer","values","i","deleteEmptyCategories","target","replace","trim","charCode","Board","Header","onFinishClick","PopulateHeader","MessageScreen","image","alt","OnBoarding","helloImage","downArrow","OnBoardingContainer","App","render","_this$props","components_MessageScreen","thanksImage","notFoundImage","cjs","backend","HTML5Backend","containers_OnBoardingContainer","HeaderContainer","containers_ListContainer","containers_BoardContainer","Component","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","unsuscribe","subscribe","initialize","href","split","initializeStore","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.897c665f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow-sketch.30028bfd.svg\";","module.exports = __webpack_public_path__ + \"static/media/hello.05e07b5d.svg\";","module.exports = __webpack_public_path__ + \"static/media/thanks-icon.84d1d4ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/not-found.8c3d2a79.svg\";","export const IS_FETCHING = 'IS_FETCHING';\nexport const IS_SENDING = 'IS_SENDING';\nexport const DID_INVALIDATE = 'DID_INVALIDATE';\nexport const SUCCESS = 'SUCCESS';\nexport const FAILURE = 'FAILURE';\n","export const CREATE_CATEGORY = 'CREATE_CATEGORY';\nexport const REMOVE_CATEGORY = 'REMOVE_CATEGORY';\nexport const RENAME_CATEGORY = 'RENAME_CATEGORY';\nexport const NORMALIZE_CATEGORIES = 'NORMALIZE_CATEGORIES';\n\n/**\n *\n * @param {int} categoryID\n * @param {string} title\n * @param {int} cardID\n * @return {JSON} the action\n */\nexport function createCategory(categoryID, title, cardID) {\n  return {\n    type: CREATE_CATEGORY,\n    payload: {\n      categoryID: categoryID,\n      title: title,\n      cardID: cardID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {int} categoryID\n * @return {JSON} the action\n */\nexport function removeCategory(categoryID) {\n  return {\n    type: REMOVE_CATEGORY,\n    payload: {\n      categoryID: categoryID,\n    },\n  };\n}\n\n/**\n *\n * @param {Number} categoryID\n * @param {Title} title\n * @return {JSON}\n */\nexport function renameCategory(categoryID, title) {\n  return {\n    type: RENAME_CATEGORY,\n    payload: {\n      categoryID: categoryID,\n      title: title,\n    },\n    error: false,\n  };\n}\n\n/**\n * Normalizes the categories in a way that is recognizable by the server.\n * This includes actions like changing the non-set by the user values to none.\n * This function should be called before the sending to the server.\n * @return {JSON} the action\n */\nexport function normalizeCategories() {\n  return {\n    type: NORMALIZE_CATEGORIES,\n    payload: {},\n    error: false,\n  };\n}\n","export default 'http://83.212.97.237:8090';\n// export default 'http://127.0.0.1:5000';\n","import * as responseStatus from '../staticContent/responseStatus';\nimport {normalizeCategories} from './categoryAction';\nimport api from './api';\n\nexport const SHOW_DESCRICTION = 'SHOW_DESCRIPTION';\nexport const HIDE_ALL_DESCRIPTIONS = 'HIDE_ALL_DESCRIPTIONS';\nexport const SHOW_TITLE_BOX = 'SHOW_TITLE_BOX';\nexport const HIDE_ALL_BOXES = 'HIDE_ALL_BOXES';\nexport const SAVE_STUDY_ID = 'SAVE_STUDY_ID';\nexport const SENDING_SORT = 'SENDING_SORT';\nexport const SAVE_THANKS_MESSAGE = 'SAVE_THANKS_MESSAGE';\nexport const RENDER_THANKS_MESSAGE = 'RENDER_THANKS_MESSAGE';\nexport const TOOGLE_ON_BOARDING = 'TOOGLE_ON_BOARDING';\n\n\n/**\n * Toogle the onboarding screen, that helps the user understand what to do.\n * @param {Boolean} show\n * @return {JSON} the action\n */\nexport function toogleOnBoarding(show) {\n  return {\n    type: TOOGLE_ON_BOARDING,\n    payload: {\n      showOnBoarding: show,\n    },\n    error: false,\n  };\n}\n\n/**\n * Shows the description of a specified card\n * @param {int} cardID the id of the card that the description will be thrown\n * @return {JSON} the action\n */\nexport function showDescription(cardID) {\n  return {\n    type: SHOW_DESCRICTION,\n    payload: {\n      cardID: cardID,\n    },\n    error: false,\n  };\n}\n\n/**\n * Hides the pop up description, it makes sure that none is shown.\n * @return {JSON} the action\n */\nexport function hideAllDescriptions() {\n  return {\n    type: HIDE_ALL_DESCRIPTIONS,\n    error: false,\n  };\n}\n\n/**\n * Shows the textbox of the category, so the user can change the title.\n * @param {Number} categoryID\n * @return {JSON} the action\n */\nexport function showTitleBoxOnCategory(categoryID) {\n  return {\n    type: SHOW_TITLE_BOX,\n    payload: {\n      categoryID: categoryID,\n    },\n    error: false,\n  };\n}\n\n/**\n * Hides all the textboxes.\n * @return {JSON} the action\n */\nexport function hideAllTitleBoxes() {\n  return {\n    type: HIDE_ALL_BOXES,\n    error: false,\n  };\n}\n\n/**\n * Saves the Study id for future reference\n * @param {Number} studyID\n * @return {JSON} the action\n */\nexport function saveStudyID(studyID) {\n  return {\n    type: SAVE_STUDY_ID,\n    payload: {\n      studyID: studyID,\n    },\n    error: false,\n  };\n}\n\n/**\n * Saves the thanks message of the study.\n * @param {String} message\n * @return {JSON} the action\n */\nexport function saveThanksMessage(message) {\n  return {\n    type: SAVE_THANKS_MESSAGE,\n    payload: {\n      message: message,\n    },\n    error: false,\n  };\n}\n\n/**\n * Flags that the thanks message screen must be shown\n * @return {JSON} the action\n */\nexport function renderThanksMessage() {\n  return {\n    type: RENDER_THANKS_MESSAGE,\n    payload: {},\n    error: false,\n  };\n}\n\n/**\n * Saves the status of the send request\n * @param {ResponseStatus} status\n * @param {JSON} response\n * @param {JSON} error\n * @return {JSON} the action\n */\nexport function sendingSort(status, response, error) {\n  return {\n    type: SENDING_SORT,\n    payload: {\n      status: status,\n    },\n    error: error,\n  };\n}\n\n/* Thunk actions */\n\n/**\n *\n * @param {Number} studyID\n * @param {Number[]} container\n * @param {Category[]} categories\n * @param {String} cardsSorted\n * @param {Number} categoriesCreated\n * @return {func}\n */\nexport function sendSort(studyID, container, categories) {\n  return function(dispatch) {\n    dispatch(normalizeCategories());\n    dispatch(sendingSort(responseStatus.IS_SENDING));\n    fetch(api+'/sort_endpoint', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        studyID: studyID,\n        categories: categories,\n        container: container,\n      }),\n    }).then(\n        (response) => response.json().then((json) => {\n          dispatch(sendingSort(responseStatus.SUCCESS));\n          dispatch(saveThanksMessage(json.message));\n          dispatch(renderThanksMessage());\n        })\n    );\n  };\n}\n","import fetch from 'cross-fetch';\nimport * as responseStatus from '../staticContent/responseStatus';\nimport {saveStudyID, toogleOnBoarding} from './uiAction';\nimport debugConsole from '../debug/Debugconsole';\nimport api from './api';\n\nexport const IMPORT_CARD = 'IMPORT_CARD';\nexport const ADD_CARD_CATEGORY = 'ADD_CARD_CATEGORY';\nexport const REMOVE_CARD_CATEGORY = 'REMOVE_CARD_CATEGORY';\nexport const ADD_CARD_CONTAINER = 'ADD_CARD_CONTAINER';\nexport const REMOVE_CARD_CONTAINER = 'REMOVE_CARD_CONTAINER';\n\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\n\n// Action creators //\n\n/**\n *\n * @param {int} cardID\n * @param {int} categoryID\n * @return {JSON} the action\n */\nexport function addCardToCategory(cardID, categoryID) {\n  return {\n    type: ADD_CARD_CATEGORY,\n    payload: {\n      cardID: cardID,\n      categoryID: categoryID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {int} cardID\n * @param {int} categoryID\n * @return {JSON} the action\n */\nexport function removeCardFromCategory(cardID, categoryID) {\n  return {\n    type: REMOVE_CARD_CATEGORY,\n    payload: {\n      cardID: cardID,\n      categoryID: categoryID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {int} cardID\n * @return {JSON} the action\n */\nexport function addCardToContainer(cardID) {\n  return {\n    type: ADD_CARD_CONTAINER,\n    payload: {\n      cardID: cardID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {int} cardID\n * @return {JSON} the action\n */\nexport function removeCardFromContainer(cardID) {\n  return {\n    type: REMOVE_CARD_CONTAINER,\n    payload: {\n      cardID: cardID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {responseStatus} status\n * @param {JSON} response\n * @param {String} error\n * @return {JSON} the action\n */\nexport function requestCards(status, response, error) {\n  return {\n    type: REQUEST_CARDS,\n    payload: {\n      status: status,\n      response: response,\n      error: error,\n    },\n  };\n}\n\n/* Thunk actions */\n\n/**\n *\n * @param {Number} studyID\n * @return {function}\n */\nexport function fetchCards(studyID) {\n  return function(dispatch) {\n    dispatch(saveStudyID(studyID));\n    dispatch(requestCards(responseStatus.IS_FETCHING));\n\n    fetch(api+'/sort_endpoint?cards=true&study_id='+studyID)\n        .then(\n            (response) => response.json().then((json) =>{\n              if (response.status === 404) {\n                dispatch(requestCards(responseStatus.SUCCESS,\n                    undefined, json.error));\n                return;\n              }\n              // Load the cards\n              dispatch(requestCards(responseStatus.SUCCESS, json));\n              // Show the cards\n              for (const card of json.cards) {\n                dispatch(addCardToContainer(card.id));\n              }\n              // Show the onboarding screen\n              dispatch(toogleOnBoarding(true));\n            }),\n            (error) => debugConsole(error)\n        );\n  };\n}\n\n","/**\n * Used to print messages and other debug data to the console.\n * @param {*} params\n */\nexport default function debugConsole(...args) {\n  console.log(args);\n}\n","/**\n * Represents the data model of the category\n */\nexport default class Category {\n  /**\n   *\n   * @param {int} id\n   * @param {String} title\n   */\n  constructor(id, title) {\n    this.id = id;\n    this.title = title;\n    this.cards = [];\n  }\n\n  /**\n   *\n   * @param {int} cardId\n   */\n  addCard(cardId) {\n    this.cards.push(cardId);\n  }\n\n  /**\n   *\n   * @param {int} cardId\n   */\n  removeCard(cardId) {\n    this.cards = this.cards.filter((id)=> {\n      return id !== cardId;\n    });\n  }\n}\n","export default {\n  clickToRename: 'click here to rename',\n  studyNotFound: 'study not found',\n  dropToAdd: 'drop to add',\n  dropToCreateCategory: 'drop to create a category',\n};\n","import enUS from './en-us';\n\n/**\n * Holds the proper localized text for usage in the UI.\n */\nclass LocalizedText {\n  /**\n   *\n   * @param {String} locale supported locales:\n   * - 'en-us' : English - United States\n   */\n  initialize(locale) {\n    switch (locale) {\n      default: {\n        this.text = enUS;\n      }\n    }\n  }\n};\n\nexport default new LocalizedText();\n","/**\n * Data model representing the card\n */\nexport default class Card {\n  /**\n   *\n   * @param {int} id\n   * @param {string} title\n   * @param {string} description\n   */\n  constructor(id, title, description) {\n    this.id = id;\n    this.title = title;\n    this.description = description;\n  }\n}\n","/**\n * Static holder for the cards\n */\nexport default {};\n","import {combineReducers} from 'redux';\nimport containerReducer from './containerReducer';\nimport categoriesReducer from './categoriesReducer';\nimport uiReducer from './uiReducer';\nimport cardReducer from './cardReducer';\n\nconst app = combineReducers({\n  cards: cardReducer,\n  categories: categoriesReducer,\n  container: containerReducer,\n  ui: uiReducer,\n});\n\nexport default app;\n","import * as cardActions from '../actions/cardAction';\nimport Card from '../elements/Card';\nimport cards from '../staticContent/cards';\n\n/**\n *\n * @param {boardState} state\n * @param {cardActions} action\n * @return {boardState}\n */\nexport default function card(state={}, action) {\n  switch (action.type) {\n    case cardActions.REQUEST_CARDS: {\n      const response = action.payload.response;\n      if (response) {\n        for (const card of response.cards) {\n          cards[card.id] =\n              new Card(card.id, card.name, card.description);\n        }\n      }\n      return Object.assign({}, state, {\n        'status': action.payload.status,\n        'notFound': action.payload.error ? true : false,\n      });\n    }\n    default:\n      return state;\n  }\n}\n","import * as cardActions from '../actions/cardAction';\nimport * as categoryAction from '../actions/categoryAction';\nimport Category from '../elements/Category';\n\nimport L from '../localization/LocalizedText';\n\n/**\n *\n * @param {boardState} state\n * @param {cardActions} action\n * @return {boardState}\n */\nexport default function categories(state={}, action) {\n  switch (action.type) {\n    case categoryAction.CREATE_CATEGORY: {\n      const id = action.payload.categoryID || Date.now();\n      const category = new Category(id, action.payload.title);\n      category.addCard(action.payload.cardID);\n\n      const newState = Object.assign({}, state);\n      newState[id] = category;\n      return newState;\n    }\n    case categoryAction.REMOVE_CATEGORY: {\n      const categoryID = action.payload.categoryID;\n      const newState = Object.assign({}, state);\n\n      delete newState[categoryID];\n      return newState;\n    }\n    case categoryAction.RENAME_CATEGORY: {\n      const id = action.payload.categoryID;\n      const newState = Object.assign({}, state);\n\n      newState[id].title = action.payload.title;\n      return newState;\n    }\n    case cardActions.ADD_CARD_CATEGORY: {\n      const cardID = action.payload.cardID;\n      const categoryID = action.payload.categoryID;\n      const newState = Object.assign({}, state);\n\n      newState[categoryID].addCard(cardID);\n      return newState;\n    }\n    case cardActions.REMOVE_CARD_CATEGORY: {\n      const cardID = action.payload.cardID;\n      const categoryID = action.payload.categoryID;\n      const newState = Object.assign({}, state);\n\n      newState[categoryID].removeCard(cardID);\n      return newState;\n    }\n    case categoryAction.NORMALIZE_CATEGORIES: {\n      const newState = Object.assign({}, state);\n      for (const categoryID in newState) {\n        if ({}.hasOwnProperty.call(newState, categoryID)) {\n          const category = newState[categoryID];\n          if (category.title === L.text.clickToRename) {\n            category.title = 'not set';\n          }\n        }\n      }\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","import * as cardActions from '../actions/cardAction';\n\n/**\n *\n * @param {boardState} state\n * @param {ReduxAction} action\n * @return {boardState}\n */\nexport default function container(state={}, action) {\n  switch (action.type) {\n    case cardActions.ADD_CARD_CONTAINER: {\n      return [\n        ...state,\n        action.payload.cardID,\n      ];\n    }\n    case cardActions.REMOVE_CARD_CONTAINER: {\n      return [...state].filter((x) => x !== action.payload.cardID);\n    }\n    default:\n      return state;\n  }\n}\n","import * as uiAction from '../actions/uiAction';\n\n/**\n *\n * @param {BoardState} state\n * @param {UIAction} action\n * @return {BoardState}\n */\nexport default function ui(state={}, action) {\n  switch (action.type) {\n    case uiAction.TOOGLE_ON_BOARDING: {\n      return Object.assign({}, state, {\n        'showOnBoarding': action.payload.showOnBoarding,\n      });\n    }\n    case uiAction.SHOW_DESCRICTION: {\n      return Object.assign({}, state, {\n        'showingDescription': action.payload.cardID,\n      });\n    }\n    case uiAction.HIDE_ALL_DESCRIPTIONS: {\n      return Object.assign({}, state, {\n        'showingDescription': undefined,\n      });\n    }\n    case uiAction.SHOW_TITLE_BOX: {\n      return Object.assign({}, state, {\n        'changeTitle': action.payload.categoryID,\n      });\n    }\n    case uiAction.HIDE_ALL_BOXES: {\n      return Object.assign({}, state, {\n        'changeTitle': undefined,\n      });\n    }\n    case uiAction.SAVE_STUDY_ID: {\n      return Object.assign({}, state, {\n        'studyID': action.payload.studyID,\n      });\n    }\n    case uiAction.SENDING_SORT: {\n      return Object.assign({}, state, {\n        'sendingSort': action.payload.status,\n      });\n    }\n    case uiAction.SAVE_THANKS_MESSAGE: {\n      return Object.assign({}, state, {\n        'thanksMessage': action.payload.message,\n      });\n    }\n    case uiAction.RENDER_THANKS_MESSAGE: {\n      return Object.assign({}, state, {\n        'renderThanks': true,\n      });\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","const initialState = {\n  cards: {\n    notFound: undefined,\n    status: undefined,\n  },\n  container: [],\n  categories: {\n    /* CategoryId: Category */\n  },\n  ui: {\n    showOnBoarding: undefined,\n    changeTitle: undefined,\n    showingDescription: undefined,\n    studyID: undefined,\n    sendingSort: undefined,\n    renderThanks: undefined,\n    thanksMessage: undefined,\n    cardsSorted: undefined,\n    categoriesCreated: undefined,\n  },\n};\n\nexport default initialState;\n","export const itemTypes = {\n  CARD: 'card-drag',\n};\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {DragSource} from 'react-dnd';\n\nimport {itemTypes} from '../../staticContent/dragConstants';\n\n\nconst cardSource = {\n  beginDrag(props) {\n    return {id: props.id, position: props.position};\n  },\n};\n\n/**\n *\n * @param {*} connect\n * @param {*} monitor\n * @return {*}\n */\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  };\n}\n\n\nconst CardItem = ({id, title, description, minimized, position,\n  onClick, showDescription, connectDragSource, isDragging}) => {\n  const classString = minimized ? 'card minimized' : 'card';\n  return connectDragSource(\n      <li className={classString}>\n        <h4>{title}</h4>\n        {\n          /* Hide the description */\n          !minimized && <p>{description}</p>\n        }\n        {\n          /* Show the description button */\n          (minimized && description) &&\n            <div className=\"desc-container\">\n              <button onClick={onClick} className=\"desc-btn\">\n                ?\n              </button>\n              {\n                showDescription &&\n                <div className=\"desc-pop\">\n                  <p>\n                    {description}\n                  </p>\n                </div>\n              }\n            </div>\n        }\n        {\n          /* The \"drag to add\" action */\n        }\n      </li>);\n};\n\nCardItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  minimized: PropTypes.bool,\n  position: PropTypes.number.isRequired,\n  onClick: PropTypes.func,\n  showDescription: PropTypes.bool,\n};\n\n\n// eslint-disable-next-line new-cap\nexport default DragSource(itemTypes.CARD, cardSource, collect)(CardItem);\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line no-unused-vars\nimport CardItem from './CardItem.jsx';\n\nconst List = ({cards}) => (\n  <ul id='list'>\n    {\n      cards.map((card) => (\n        <CardItem key={card.id} id={card.id} title={card.title}\n          description={card.description} position={-1} />\n      ))\n    }\n  </ul>\n);\n\nList.propTypes = {\n  cards: PropTypes.array.isRequired,\n};\n\nexport default List;\n","import cards from '../staticContent/cards';\n\n/**\n * Parses the card's id and returns the real objects\n * @param {cardID[]} cardIDs\n * @return {card[]} the corresponding objects\n */\nexport default function parseCards(cardIDs) {\n  // Add the card item based on it's id\n  const cardsArr = [];\n  for (const cardID of cardIDs) {\n    cardsArr.push(cards[cardID]);\n  }\n  return {\n    cards: cardsArr,\n  };\n}\n","import {connect} from 'react-redux';\nimport List from '../components/List.jsx';\nimport parseCards from '../../helpers/cardParser';\n\n\nconst mapStateToProps = (state) => {\n  return parseCards(state.container);\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nconst ListContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(List);\n\nexport default ListContainer;\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {DropTarget} from 'react-dnd';\n\nimport {itemTypes} from '../../staticContent/dragConstants';\n// eslint-disable-next-line no-unused-vars\nimport CardItem from './CardItem.jsx';\nimport parseCards from '../../helpers/cardParser';\nimport L from '../../localization/LocalizedText';\n\nimport plusImage from '../../icons/plus.svg';\n\nconst categoryTarget = {\n  drop(props, monitor) {\n    const card = monitor.getItem();\n    props.onCardDrop(card.id, card.position, props.id);\n  },\n};\n\n/**\n *\n * @param {*} connect\n * @param {*} monitor\n * @return {*}\n */\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n  };\n}\n\nconst CategoryItem = ({id, title, cards, onClick, showTitleBox,\n  onCardDrop, onTitleClick, onTitleChange, onTitleFinish,\n  descriptionID, connectDropTarget, isOver}) => {\n  cards = parseCards(cards).cards;\n  return connectDropTarget(\n      <li className={(isOver) ? 'category max-height' : 'category'}>\n        {\n          showTitleBox &&\n          <div className=\"title-input\">\n            <input type='text' defaultValue={title}\n              onChange={(e)=>onTitleChange(e, id)}\n              onKeyPress={(e)=>onTitleFinish(e)}\n              onClick={(e)=>e.stopPropagation()}></input>\n            <button type=\"button\" onClick={()=>onTitleFinish()}></button>\n          </div>\n        }\n        {\n          !showTitleBox &&\n          <h3 onClick={(e)=>onTitleClick(e, id)}>{title}</h3>\n        }\n        {\n          /* Show the 'drop to add to category' */\n          isOver &&\n          <div className=\"drop-to-add\">\n            <img src={plusImage}></img>\n            <p>{L.text.dropToAdd}</p>\n          </div>\n        }\n        <ul>{\n          cards.map((card) => (\n            <CardItem key={card.id} id={card.id} title={card.title}\n              description={card.description} minimized={true}\n              position={id}\n              onClick={(event) => onClick(event, card.id, card.description)}\n              showDescription={card.id===descriptionID}/>\n          ))\n        }</ul>\n      </li>\n  );\n};\n\nCategoryItem.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\n// eslint-disable-next-line new-cap\nexport default DropTarget(itemTypes.CARD,\n    categoryTarget, collect)(CategoryItem);\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport {DropTarget} from 'react-dnd';\n\nimport {itemTypes} from '../../staticContent/dragConstants';\n// eslint-disable-next-line no-unused-vars\nimport CategoryItem from './CategoryItem';\nimport L from '../../localization/LocalizedText';\nimport plusImage from '../../icons/plus.svg';\n\nconst boardTarget = {\n  drop(props, monitor) {\n    if (!monitor.didDrop()) {\n      const card = monitor.getItem();\n      // Handle the drop only if a category did not handle it first\n      props.onDrop(card.id, card.position);\n    }\n    props.removeEmptyCategories(props.categories);\n  },\n};\n\n/**\n *\n * @param {*} connect\n * @param {*} monitor\n * @return {*}\n */\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver({shallow: true}),\n  };\n}\n\nconst Board = ({categories, onClick, onCardClick, onCategTitleClick,\n  changeTitleID, onCardDrop, onDrop, descriptionID, onCategTitleChange,\n  onCategTitleFinish, removeEmptyCategories, connectDropTarget, isOver}) => {\n  categories = categories.map((category) => (\n    <CategoryItem key={'k' + category.id} id={category.id}\n      title={category.title} cards={category.cards} onClick={onCardClick}\n      onTitleChange={onCategTitleChange}\n      onTitleClick={onCategTitleClick} onCardDrop={onCardDrop}\n      onTitleFinish={onCategTitleFinish}\n      showTitleBox={category.id === changeTitleID}\n      descriptionID={descriptionID}/>\n  ));\n\n  return connectDropTarget(<ul id='board' onClick={onClick}>\n    {\n      categories\n    }\n    {\n      /* Show the 'create new category' */\n      isOver &&\n      <div className=\"category drop-to-create\">\n        <img src={plusImage}></img>\n        <p>{L.text.dropToCreateCategory}</p>\n      </div>\n    }\n  </ul>);\n};\n\n// TODO\n// Board.protoTypes = {\n//   cards: PropTypes.arrayOf(\n//   )\n// }\n\n\n// eslint-disable-next-line new-cap\nexport default DropTarget(itemTypes.CARD,\n    boardTarget, collect)(Board);\n","import {connect} from 'react-redux';\n\nimport Board from '../components/Board.jsx';\nimport * as uiAction from '../../actions/uiAction';\nimport * as cardAction from '../../actions/cardAction';\nimport * as categoryAction from '../../actions/categoryAction';\n\nimport L from '../../localization/LocalizedText';\n\n/**\n * Removes the card with the given id from it's current parent\n * @param {function} dispatch\n * @param {Number} cardPosition\n * @param {Number} cardID\n */\nfunction removeCardFromParent(dispatch, cardPosition, cardID) {\n  if (cardPosition === -1) {\n    // The card is in the main container\n    dispatch(cardAction.removeCardFromContainer(cardID));\n  } else\n  if (cardPosition > -1) {\n    // The card belongs to a category and it is being moved to a\n    // new one\n    dispatch(cardAction.removeCardFromCategory(cardID, cardPosition));\n  }\n}\n\n/**\n * Looks for an empty category and removes it from the state\n * @param {function} dispatch\n * @param {Category[]} categories\n */\nfunction deleteEmptyCategories(dispatch, categories) {\n  for (const i in categories) {\n    if (categories[i].cards.length < 1) {\n      // Only one category can be empty on each state update\n      dispatch(categoryAction.removeCategory(categories[i].id));\n      break;\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  // Convert to array\n  const categories = Object.values(state.categories);\n  const showingDescription = state.ui['showingDescription'];\n  const changeTitle = state.ui['changeTitle'];\n\n  return {categories: categories, descriptionID: showingDescription,\n    changeTitleID: changeTitle};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onClick: () => {\n      // Hide the descriptions and category renaming on user click\n      dispatch(uiAction.hideAllDescriptions());\n      dispatch(uiAction.hideAllTitleBoxes());\n    },\n    onDrop: (cardID, cardPosition) => {\n      // This is *only* executed only if the OnCardDrop didn't\n      // Create the new category, containing the dropped card\n      removeCardFromParent(dispatch, cardPosition, cardID);\n      dispatch(categoryAction.createCategory(undefined,\n          L.text.clickToRename, cardID));\n    },\n    removeEmptyCategories: (categories) => {\n      // This is triggered on every drop on the Board\n      deleteEmptyCategories(dispatch, categories);\n    },\n    onCategTitleClick: (event, categoryID) => {\n      event.stopPropagation();\n      dispatch(uiAction.showTitleBoxOnCategory(categoryID));\n    },\n    onCategTitleChange: (event, categoryID) => {\n      let title = event.target.value;\n      title = title.replace(/\\s\\s+/g, ' ').trim();\n      title = (title.length > 0) ? title : L.text.clickToRename;\n      dispatch(categoryAction.renameCategory(categoryID, title));\n    },\n    onCategTitleFinish: (event) => {\n      if (!event) {\n        dispatch(uiAction.hideAllTitleBoxes());\n        return;\n      }\n      event.stopPropagation();\n      if (event.charCode === 13) {\n        dispatch(uiAction.hideAllTitleBoxes());\n      }\n    },\n    onCardClick: (event, cardID, description) => {\n      event.stopPropagation();\n      if (description && description.length > 0) {\n        dispatch(uiAction.showDescription(cardID));\n      }\n    },\n    onCardDrop: (cardID, cardPosition, categoryID) => {\n      removeCardFromParent(dispatch, cardPosition, cardID);\n      dispatch(cardAction.addCardToCategory(cardID, categoryID));\n    },\n  };\n};\n\nconst BoardContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Board);\n\nexport default BoardContainer;\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({studyID, container, categories, onFinishClick}) => (\n  <header>\n    <h1 id=\"logo\">Card Sorter</h1>\n    <button onClick={() =>\n      onFinishClick(studyID, container, categories)}>Finish</button>\n  </header>\n);\n\nHeader.propTypes = {\n  studyID: PropTypes.string.isRequired,\n  container: PropTypes.array,\n  categories: PropTypes.object,\n  onFinishClick: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import {connect} from 'react-redux';\n\nimport Header from '../components/Header.jsx';\nimport {sendSort} from '../../actions/uiAction';\n\n\nconst mapStateToProps = (state) => {\n  // The state is updated so the component knows what to send on finish\n  // TODO: This may not be a very good solution\n  return {\n    studyID: state.ui.studyID,\n    container: state.container,\n    categories: state.categories,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFinishClick: (studyID, container, categories) => {\n      dispatch(sendSort(studyID, container, categories));\n    },\n  };\n};\n\nconst PopulateHeader = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Header);\n\nexport default PopulateHeader;\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MessageScreen = ({message, image}) => (\n  <div className=\"message-screen\">\n    <h1 id=\"logo\">Card Sorter</h1>\n    <img src={image} alt='Sending love!'></img>\n    <h2>{message}</h2>\n  </div>\n);\n\nMessageScreen.propTypes = {\n  message: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n};\n\nexport default MessageScreen;\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\n// eslint-disable-next-line no-unused-vars\nimport PropTypes from 'prop-types';\n\nimport helloImage from '../../icons/hello.svg';\nimport downArrow from '../../icons/down-arrow-sketch.svg';\n\nconst OnBoarding = ({show, onClick}) => {\n  if (show) {\n    return (\n      <div className=\"on-boarding-screen\" onClick={(e) => onClick(e)}>\n        <img src={helloImage}></img>\n        <h2>Hello!</h2>\n        <div className=\"list-explainer\">\n          <img src={downArrow} alt=\"Arrow pointing to the left of the screen\"\n            className=\"arrow\"></img>\n          <span>\n            <p>Pick a card and drag it to the right to create a category.</p>\n            <p>You can add a card to a category by dropping the card inside of the category.</p>\n          </span>\n        </div>\n        <div className=\"finish-explainer\">\n          <img src={downArrow} alt=\"Arrow pointing to the left of the screen\"\n            className=\"arrow\"></img>\n          <span>\n            <p>When you feel like you are done, press the finish button.</p>\n          </span>\n        </div>\n      </div>\n    );\n  }\n  return <span></span>;\n};\n\nOnBoarding.propTypes = {\n  show: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default OnBoarding;\n","import {connect} from 'react-redux';\n\nimport OnBoarding from '../components/OnBoarding';\nimport {toogleOnBoarding} from '../../actions/uiAction';\n\nconst mapStateToProps = (state) => {\n  return {\n    show: state.ui.showOnBoarding,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onClick: (e) => {\n      e.stopPropagation();\n      dispatch(toogleOnBoarding(false));\n    },\n  };\n};\n\nconst OnBoardingContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(OnBoarding);\n\nexport default OnBoardingContainer;\n","import 'babel-polyfill'; // Ensure all polyfills are present\n\n// eslint-disable-next-line no-unused-vars\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\n// eslint-disable-next-line no-unused-vars\nimport {DragDropContextProvider} from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\n// eslint-disable-next-line no-unused-vars\nimport ListContainer from './elements/containers/ListContainer.jsx';\n// eslint-disable-next-line no-unused-vars\nimport BoardContainer from './elements/containers/BoardContainer.jsx';\n// eslint-disable-next-line no-unused-vars\nimport HeaderContainer from './elements/containers/HeaderContainer.jsx';\n// eslint-disable-next-line no-unused-vars\nimport MessageScreen from './elements/components/MessageScreen.jsx';\n// eslint-disable-next-line no-unused-vars\nimport OnBoardingContainer from './elements/containers/OnBoardingContainer.jsx';\n\nimport thanksImage from './icons/thanks-icon.svg';\nimport notFoundImage from './icons/not-found.svg';\n\nimport L from './localization/LocalizedText';\nimport './App.css';\n\n/**\n * App route\n */\nclass App extends Component {\n  /**\n   * React render\n   * @return {Component}\n   */\n  render() {\n    const {studyNotFound, renderThanks, thanksMessage} = this.props;\n\n    let render;\n    if (renderThanks) {\n      render = (\n        <main>\n          <MessageScreen message={thanksMessage} image={thanksImage}/>\n        </main>);\n    } else\n    if (studyNotFound) {\n      render = (\n        <main>\n          <MessageScreen message={L.text.studyNotFound} image={notFoundImage}/>\n        </main>);\n    } else {\n      render = (\n        <DragDropContextProvider backend={HTML5Backend}>\n          <OnBoardingContainer />\n          <div className=\"App\">\n            <HeaderContainer />\n            <div id=\"main-panel\">\n              <ListContainer />\n              <BoardContainer />\n            </div>\n          </div>\n        </DragDropContextProvider>);\n    }\n\n    return render;\n  }\n}\n\nexport default connect(\n    (state) => {\n      return {\n        studyNotFound: state.cards.notFound,\n        renderThanks: state.ui.renderThanks,\n        thanksMessage: state.ui.thanksMessage,\n      };\n    }\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport initializeStore from './Store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = initializeStore();\nReactDOM.render(<Provider store={store}><App /></Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {applyMiddleware, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n// import logger from 'redux-logger';\n\nimport app from './reducers/indexReducer';\nimport initialState from './reducers/boardState';\nimport {fetchCards} from './actions/cardAction';\nimport L from './localization/LocalizedText';\n\n/**\n * @return {Store}\n */\nexport default function initializeStore() {\n  const store = createStore(app, initialState, applyMiddleware(\n      thunkMiddleware,\n      // logger\n  ));\n  // const store = createStore(app, window.STATE_FROM_SERVER);\n\n  const unsuscribe = store.subscribe(() => {});\n  // () => debugConsole(store.getState())\n  // runTest(store);\n\n  // Initialize locale\n  L.initialize('en-us');\n\n  // Get the path id\n  const id = window.location.href.split('/')[3];\n  // Load the cards\n  store.dispatch(fetchCards(id));\n\n  // debugConsole(store.getState());\n\n  unsuscribe();\n  return store;\n}\n","module.exports = __webpack_public_path__ + \"static/media/plus.ed718a5f.svg\";"],"sourceRoot":""}