{"version":3,"sources":["staticContent/responseStatus.js","actions/api.js","actions/uiAction.js","actions/cardAction.js","debug/Debugconsole.js","actions/categoryAction.js","elements/Category.js","staticContent/cards.js","reducers/indexReducer.js","reducers/cardReducer.js","reducers/categoriesReducer.js","reducers/containerReducer.js","reducers/uiReducer.js","reducers/boardState.js","staticContent/dragConstants.js","elements/components/CardItem.jsx","elements/components/Container.jsx","helpers/cardParser.js","elements/containers/PopulateContainer.jsx","elements/components/CategoryItem.jsx","elements/components/Board.jsx","elements/containers/PopulateBoard.jsx","localization/text.js","elements/components/Header.jsx","elements/containers/PopulateHeader.jsx","App.jsx","serviceWorker.js","index.jsx","Store.js"],"names":["IS_FETCHING","IS_SENDING","SUCCESS","api","SHOW_DESCRICTION","HIDE_ALL_DESCRIPTIONS","SHOW_TITLE_BOX","HIDE_ALL_BOXES","SAVE_STUDY_ID","SENDING_SORT","hideAllTitleBoxes","type","error","sendingSort","status","payload","ADD_CARD_CATEGORY","REMOVE_CARD_CATEGORY","ADD_CARD_CONTAINER","REMOVE_CARD_CONTAINER","REQUEST_CARDS","requestCards","response","fetchCards","studyID","dispatch","saveStudyID","responseStatus","fetch","then","json","cardID","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","cards","Symbol","iterator","next","done","card","value","id","err","return","_len","arguments","length","args","Array","_key","console","log","debugConsole","CREATE_CATEGORY","REMOVE_CATEGORY","RENAME_CATEGORY","Category","title","Object","classCallCheck","this","cardId","push","filter","staticContent_cards","app","combineReducers","state","action","cardActions","assign","categories","categoryAction","categoryID","Date","now","category","addCard","newState","removeCard","container","concat","toConsumableArray","x","ui","uiAction","showingDescription","changeTitle","initialState","itemTypes","DragSource","beginDrag","props","position","connect","monitor","connectDragSource","dragSource","isDragging","_ref","description","minimized","onClick","showDescription","classString","react_default","a","createElement","className","Container","map","components_CardItem","key","parseCards","cardIDs","cardsArr","PopulateContainer","DropTarget","drop","getItem","onCardDrop","connectDropTarget","dropTarget","isOver","showTitleBox","onTitleClick","onTitleChange","onTitleFinish","descriptionID","defaultValue","onChange","e","onKeyPress","stopPropagation","event","didDrop","onDrop","removeEmptyCategories","onCardClick","onCategTitleClick","changeTitleID","onCategTitleChange","onCategTitleFinish","components_CategoryItem","removeCardFromParent","cardPosition","cardAction","PopulateBoard","values","i","deleteEmptyCategories","target","replace","trim","charCode","Board","Header","onFinishClick","PopulateHeader","method","headers","Content-Type","body","JSON","stringify","sendSort","App","cjs","backend","HTML5Backend","containers_PopulateHeader","containers_PopulateContainer","containers_PopulateBoard","Component","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","logger","unsuscribe","subscribe","initializeStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSAAaA,EAAc,cACdC,EAAa,aAEbC,EAAU,UCHRC,EAAA,4BCGFC,EAAmB,mBACnBC,EAAwB,wBACxBC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAgB,gBAChBC,EAAe,eA+CrB,SAASC,IACd,MAAO,CACLC,KAAMJ,EACNK,OAAO,GAwBJ,SAASC,EAAYC,GAC1B,MAAO,CACLH,KAAMF,EACNM,QAAS,CACPD,OAAQA,GAEVF,OAAO,GClFJ,IACMI,EAAoB,oBACpBC,EAAuB,uBACvBC,EAAqB,qBACrBC,EAAwB,wBAExBC,EAAgB,gBA2EtB,SAASC,EAAaP,EAAQQ,EAAUV,GAC7C,MAAO,CACLD,KAAMS,EACNL,QAAS,CACPD,OAAQA,EACRQ,SAAUA,EACVV,MAAOA,IAYN,SAASW,EAAWC,GACzB,OAAO,SAASC,GACdA,EDxCG,SAAqBD,GAC1B,MAAO,CACLb,KAAMH,EACNO,QAAS,CACPS,QAASA,GAEXZ,OAAO,GCkCEc,CAAYF,IACrBC,EAASJ,EAAaM,IAEtBC,IAAMzB,EAAI,sCAAsCqB,GAC3CK,KACG,SAACP,GAAD,OAAcA,EAASQ,OAAOD,KAAK,SAACC,GAElCL,EAASJ,EAAaM,EAAwBG,IAFJ,IAzDrBC,EAyDqBC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAI1C,QAAAC,EAAAC,EAAmBP,EAAKQ,MAAxBC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAA+B,KAApBW,EAAoBP,EAAAQ,MAC7BnB,GA9DmBM,EA8DSY,EAAKE,GA7DxC,CACLlC,KAAMO,EACNH,QAAS,CACPgB,OAAQA,GAEVnB,OAAO,MAmD6C,MAAAkC,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAK,EAAAU,QAAAV,EAAAU,SAAA,WAAAd,EAAA,MAAAC,OAQ5C,SAACtB,GAAD,OCpHG,WAA+B,QAAAoC,EAAAC,UAAAC,OAANC,EAAM,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAANF,EAAME,GAAAJ,UAAAI,GAC5CC,QAAQC,IAAIJ,GDmHSK,CAAa5C,MExH7B,IAAM6C,EAAkB,kBAClBC,EAAkB,kBAClBC,EAAkB,sCCCVC,aAMnB,SAAAA,EAAYf,EAAIgB,GAAQC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACtBI,KAAKnB,GAAKA,EACVmB,KAAKH,MAAQA,EACbG,KAAK1B,MAAQ,uDAOP2B,GACND,KAAK1B,MAAM4B,KAAKD,sCAOPA,GACTD,KAAK1B,MAAQ0B,KAAK1B,MAAM6B,OAAO,SAACtB,GAC9B,OAAOA,IAAOoB,aC1BL,IAAAG,EAAA,GCGf,IAOeC,EAPHC,0BAAgB,CAC1BhC,MCGa,WAAgC,IAAlBiC,EAAkBtB,UAAAC,OAAA,QAAAf,IAAAc,UAAA,GAAAA,UAAA,GAAZ,GAAIuB,EAAQvB,UAAAC,OAAA,EAAAD,UAAA,QAAAd,EAC7C,OAAQqC,EAAO7D,MACb,KAAK8D,EACH,IAAMnD,EAAWkD,EAAOzD,QAAQO,SAChC,GAAIA,EAAU,KAAAU,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACZ,QAAAC,EAAAC,EAAmBf,EAASgB,MAA5BC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAmC,KAAxBW,EAAwBP,EAAAQ,MACjCN,EAAM4B,KAAKvB,IAFD,MAAAG,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAK,EAAAU,QAAAV,EAAAU,SAAA,WAAAd,EAAA,MAAAC,IAKd,OAAO4B,OAAOY,OAAO,GAAIH,EAAO,CAC9BzD,OAAU0D,EAAOzD,QAAQD,SAG7B,QACE,OAAOyD,IDhBXI,WEEa,WAAsC,IAAlBJ,EAAkBtB,UAAAC,OAAA,QAAAf,IAAAc,UAAA,GAAAA,UAAA,GAAZ,GAAIuB,EAAQvB,UAAAC,OAAA,EAAAD,UAAA,QAAAd,EACnD,OAAQqC,EAAO7D,MACb,KAAKiE,EACH,IAAM/B,EAAK2B,EAAOzD,QAAQ8D,YAAcC,KAAKC,MACvCC,EAAW,IAAIpB,EAASf,EAAI2B,EAAOzD,QAAQ8C,OACjDmB,EAASC,QAAQT,EAAOzD,QAAQgB,QAEhC,IAAMmD,EAAWpB,OAAOY,OAAO,GAAIH,GAEnC,OADAW,EAASrC,GAAMmC,EACRE,EAET,KAAKN,EACH,IAAMC,EAAaL,EAAOzD,QAAQ8D,WAC5BK,EAAWpB,OAAOY,OAAO,GAAIH,GAGnC,cADOW,EAASL,GACTK,EAET,KAAKN,EACH,IAAM/B,EAAK2B,EAAOzD,QAAQ8D,WACpBK,EAAWpB,OAAOY,OAAO,GAAIH,GAGnC,OADAW,EAASrC,GAAIgB,MAAQW,EAAOzD,QAAQ8C,MAC7BqB,EAET,KAAKT,EACH,IAAM1C,EAASyC,EAAOzD,QAAQgB,OACxB8C,EAAaL,EAAOzD,QAAQ8D,WAC5BK,EAAWpB,OAAOY,OAAO,GAAIH,GAGnC,OADAW,EAASL,GAAYI,QAAQlD,GACtBmD,EAET,KAAKT,EACH,IAAM1C,EAASyC,EAAOzD,QAAQgB,OACxB8C,EAAaL,EAAOzD,QAAQ8D,WAC5BK,EAAWpB,OAAOY,OAAO,GAAIH,GAGnC,OADAW,EAASL,GAAYM,WAAWpD,GACzBmD,EAET,QACE,OAAOX,IF3CXa,UGDa,WAAqC,IAAlBb,EAAkBtB,UAAAC,OAAA,QAAAf,IAAAc,UAAA,GAAAA,UAAA,GAAZ,GAAIuB,EAAQvB,UAAAC,OAAA,EAAAD,UAAA,QAAAd,EAClD,OAAQqC,EAAO7D,MACb,KAAK8D,EACH,SAAAY,OAAAvB,OAAAwB,EAAA,EAAAxB,CACKS,GADL,CAEEC,EAAOzD,QAAQgB,SAGnB,KAAK0C,EACH,OAAOX,OAAAwB,EAAA,EAAAxB,CAAIS,GAAOJ,OAAO,SAACoB,GAAD,OAAOA,IAAMf,EAAOzD,QAAQgB,SAEvD,QACE,OAAOwC,IHVXiB,GIFa,WAA8B,IAAlBjB,EAAkBtB,UAAAC,OAAA,QAAAf,IAAAc,UAAA,GAAAA,UAAA,GAAZ,GAAIuB,EAAQvB,UAAAC,OAAA,EAAAD,UAAA,QAAAd,EAC3C,OAAQqC,EAAO7D,MACb,KAAK8E,EACH,OAAO3B,OAAOY,OAAO,GAAIH,EAAO,CAC9BmB,mBAAsBlB,EAAOzD,QAAQgB,SAGzC,KAAK0D,EACH,OAAO3B,OAAOY,OAAO,GAAIH,EAAO,CAC9BmB,wBAAsBvD,IAG1B,KAAKsD,EACH,OAAO3B,OAAOY,OAAO,GAAIH,EAAO,CAC9BoB,YAAenB,EAAOzD,QAAQ8D,aAGlC,KAAKY,EACH,OAAO3B,OAAOY,OAAO,GAAIH,EAAO,CAC9BoB,iBAAexD,IAGnB,KAAKsD,EACH,OAAO3B,OAAOY,OAAO,GAAIH,EAAO,CAC9B/C,QAAWgD,EAAOzD,QAAQS,UAG9B,KAAKiE,EACH,OAAO3B,OAAOY,OAAO,GAAIH,EAAO,CAC9B1D,YAAe2D,EAAOzD,QAAQD,SAGlC,QACE,OAAOyD,MCzBEqB,EAhBM,CACnBtD,MAAO,CACLxB,YAAQqB,GAEViD,UAAW,GACXT,WAAY,GAGZa,GAAI,CACFG,iBAAaxD,EACbuD,wBAAoBvD,EACpBX,aAASW,EACTtB,iBAAasB,sECZJ0D,EACL,YC0BR,IAyCeC,uBAAWD,EA7DP,CACjBE,UADiB,SACPC,GACR,MAAO,CAACnD,GAAImD,EAAMnD,GAAIoD,SAAUD,EAAMC,YAU1C,SAAiBC,EAASC,GACxB,MAAO,CACLC,kBAAmBF,EAAQG,aAC3BC,WAAYH,EAAQG,eA8CTR,CAzCE,SAAAS,GAC8CA,EAD5C1D,GAC4C,IADxCgB,EACwC0C,EADxC1C,MAAO2C,EACiCD,EADjCC,YAAaC,EACoBF,EADpBE,UACzCC,GAA6DH,EADTN,SACSM,EAA7DG,SAASC,EAAoDJ,EAApDI,gBAAiBP,EAAmCG,EAAnCH,kBACpBQ,GADuDL,EAAhBD,WACzBG,EAAY,iBAAmB,QACnD,OAAOL,EACHS,EAAAC,EAAAC,cAAA,MAAIC,UAAWJ,GACbC,EAAAC,EAAAC,cAAA,UAAKlD,IAGF4C,GAAaI,EAAAC,EAAAC,cAAA,SAAIP,GAIlBC,GACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAQL,QAASA,EAASM,UAAU,YAApC,KAIEL,GACAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,SACGP,SC5BNS,EAjBG,SAAAV,GAAA,IAAEjE,EAAFiE,EAAEjE,MAAF,OAChBuE,EAAAC,EAAAC,cAAA,MAAIlE,GAAG,aAEHP,EAAM4E,IAAI,SAACvE,GAAD,OACRkE,EAAAC,EAAAC,cAACI,EAAD,CAAUC,IAAKzE,EAAKE,GAAIA,GAAIF,EAAKE,GAAIgB,MAAOlB,EAAKkB,MAC/C2C,YAAa7D,EAAK6D,YAAaP,UAAW,QCDrC,SAASoB,EAAWC,GAEjC,IAAMC,EAAW,GAFyBvF,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAG1C,QAAAC,EAAAC,EAAqBiF,EAArB/E,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAA8B,KAAnBD,EAAmBK,EAAAQ,MAC5B2E,EAASrD,KAAK5B,EAAMP,KAJoB,MAAAe,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAK,EAAAU,QAAAV,EAAAU,SAAA,WAAAd,EAAA,MAAAC,GAM1C,MAAO,CACLI,MAAOiF,GCTX,IAceC,EALWtB,YATF,SAAC3B,GACvB,OAAO8C,EAAW9C,EAAMa,YAGC,SAAC3D,GAC1B,MAAO,IAIiByE,CAGxBe,GCWF,IAkCeQ,wBAAW5B,EAtDH,CACrB6B,KADqB,SAChB1B,EAAOG,GACV,IAAMxD,EAAOwD,EAAQwB,UACrB3B,EAAM4B,WAAWjF,EAAKE,GAAIF,EAAKsD,SAAUD,EAAMnD,MAUnD,SAAiBqD,EAASC,GACxB,MAAO,CACL0B,kBAAmB3B,EAAQ4B,aAC3BC,OAAQ5B,EAAQ4B,WAsCLN,CAlCM,SAAAlB,GAE2B,IAFzB1D,EAEyB0D,EAFzB1D,GAAIgB,EAEqB0C,EAFrB1C,MAAOvB,EAEciE,EAFdjE,MAAOoE,EAEOH,EAFPG,QAASsB,EAEFzB,EAFEyB,aACpCC,GACkC1B,EAD9CqB,WAC8CrB,EADlC0B,cAAcC,EACoB3B,EADpB2B,cAAeC,EACK5B,EADL4B,cACzCC,EAA8C7B,EAA9C6B,cAAeP,EAA+BtB,EAA/BsB,kBAA+BtB,EAAZwB,OAElC,OADAzF,EAAQ+E,EAAW/E,GAAOA,MACnBuF,EACHhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAEVgB,GACAnB,EAAAC,EAAAC,cAAA,SAAOpG,KAAK,OAAO0H,aAAcxE,EAC/ByE,SAAU,SAACC,GAAD,OAAKL,EAAcK,EAAG1F,IAChC2F,WAAY,SAACD,GAAD,OAAKJ,EAAcI,IAC/B7B,QAAS,SAAC6B,GAAD,OAAKA,EAAEE,sBAGjBT,GACDnB,EAAAC,EAAAC,cAAA,MAAIL,QAAS,SAAC6B,GAAD,OAAKN,EAAaM,EAAG1F,KAAMgB,GAE1CgD,EAAAC,EAAAC,cAAA,UACEzE,EAAM4E,IAAI,SAACvE,GAAD,OACRkE,EAAAC,EAAAC,cAACI,EAAD,CAAUC,IAAKzE,EAAKE,GAAIA,GAAIF,EAAKE,GAAIgB,MAAOlB,EAAKkB,MAC/C2C,YAAa7D,EAAK6D,YAAaC,WAAW,EAC1CR,SAAUpD,EACV6D,QAAS,SAACgC,GAAD,OAAWhC,EAAQgC,EAAO/F,EAAKE,KACxC8D,gBAAiBhE,EAAKE,KAAKuF,WCrBzC,IA2BeX,wBAAW5B,EAnDN,CAClB6B,KADkB,SACb1B,EAAOG,GACV,IAAKA,EAAQwC,UAAW,CACtB,IAAMhG,EAAOwD,EAAQwB,UAErB3B,EAAM4C,OAAOjG,EAAKE,GAAIF,EAAKsD,UAE7BD,EAAM6C,sBAAsB7C,EAAMrB,cAUtC,SAAiBuB,EAASC,GACxB,MAAO,CACL0B,kBAAmB3B,EAAQ4B,aAC3BC,OAAQ5B,EAAQ4B,WA+BLN,CA3BD,SAAAlB,GAE8D,IAF5D5B,EAE4D4B,EAF5D5B,WAAY+B,EAEgDH,EAFhDG,QAASoC,EAEuCvC,EAFvCuC,YAAaC,EAE0BxC,EAF1BwC,kBAChDC,EAC0EzC,EAD1EyC,cAAepB,EAC2DrB,EAD3DqB,WAAoBQ,GACuC7B,EAD/CqC,OAC+CrC,EADvC6B,eAAea,EACwB1C,EADxB0C,mBAClDC,EAA0E3C,EAA1E2C,mBAA2CrB,GAA+BtB,EAAtDsC,sBAAsDtC,EAA/BsB,mBAA+BtB,EAAZwB,OAW9D,OAVApD,EAAaA,EAAWuC,IAAI,SAAClC,GAAD,OAC1B6B,EAAAC,EAAAC,cAACoC,GAAD,CAAc/B,IAAK,IAAMpC,EAASnC,GAAIA,GAAImC,EAASnC,GACjDgB,MAAOmB,EAASnB,MAAOvB,MAAO0C,EAAS1C,MAAOoE,QAASoC,EACvDZ,cAAee,EACfhB,aAAcc,EAAmBnB,WAAYA,EAC7CO,cAAee,EACflB,aAAchD,EAASnC,KAAOmG,EAC9BZ,cAAeA,MAGZP,EAAkBhB,EAAAC,EAAAC,cAAA,MAAIlE,GAAG,QAAQ6D,QAASA,GAE7C/B,MC9BN,SAASyE,GAAqB3H,EAAU4H,EAActH,IAC9B,IAAlBsH,EAEF5H,ElBoDG,SAAiCM,GACtC,MAAO,CACLpB,KAAMQ,EACNJ,QAAS,CACPgB,OAAQA,GAEVnB,OAAO,GkB1DE0I,CAAmCvH,IAE1CsH,GAAgB,GAGlB5H,ElBgBG,SAAgCM,EAAQ8C,GAC7C,MAAO,CACLlE,KAAMM,EACNF,QAAS,CACPgB,OAAQA,EACR8C,WAAYA,GAEdjE,OAAO,GkBvBE0I,CAAkCvH,EAAQsH,IAmBvD,IA4DeE,GALOrD,YAvDE,SAAC3B,GAMvB,MAAO,CAACI,WAJWb,OAAO0F,OAAOjF,EAAMI,YAIPyD,cAHL7D,EAAMiB,GAAN,mBAIzBwD,cAHkBzE,EAAMiB,GAAN,cAMK,SAAC/D,GAC1B,MAAO,CACLiF,QAAS,WAEPjF,EnB1BG,CACLd,KAAMN,EACNO,OAAO,ImByBLa,EAASgE,MAEXmD,OAAQ,SAAC7G,EAAQsH,GAGfD,GAAqB3H,EAAU4H,EAActH,GAC7CN,EhBpDC,SAAwBoD,EAAYhB,EAAO9B,GAChD,MAAO,CACLpB,KAAM8C,EACN1C,QAAS,CACP8D,WAAYA,EACZhB,MAAOA,EACP9B,OAAQA,GAEVnB,OAAO,GgB4CIgE,MAA8BzC,EC1DpC,uBD2DuBJ,KAE5B8G,sBAAuB,SAAClE,IAlC5B,SAA+BlD,EAAUkD,GACvC,IAAK,IAAM8E,KAAK9E,EACd,GAAIA,EAAW8E,GAAGnH,MAAMY,OAAS,EAAG,CAElCzB,GhBRyBoD,EgBQcF,EAAW8E,GAAG5G,GhBPlD,CACLlC,KAAM+C,EACN3C,QAAS,CACP8D,WAAYA,MgBKZ,MhBTC,IAAwBA,EgBwCzB6E,CAAsBjI,EAAUkD,IAElCoE,kBAAmB,SAACL,EAAO7D,GACzB6D,EAAMD,kBACNhH,EnB/BC,SAAgCoD,GACrC,MAAO,CACLlE,KAAML,EACNS,QAAS,CACP8D,WAAYA,GAEdjE,OAAO,GmByBI6E,CAAgCZ,KAE3CoE,mBAAoB,SAACP,EAAO7D,GAC1B,IAAIhB,EAAQ6E,EAAMiB,OAAO/G,MAEzBiB,GADAA,EAAQA,EAAM+F,QAAQ,SAAU,KAAKC,QACtB3G,OAAS,EAAKW,ECxE1B,uBDyEHpC,EhBnCC,SAAwBoD,EAAYhB,GACzC,MAAO,CACLlD,KAAMgD,EACN5C,QAAS,CACP8D,WAAYA,EACZhB,MAAOA,GAETjD,OAAO,GgB4BIgE,CAA8BC,EAAYhB,KAErDqF,mBAAoB,SAACR,GACnBA,EAAMD,kBACiB,KAAnBC,EAAMoB,UACRrI,EAASgE,MAGbqD,YAAa,SAACJ,EAAO3G,GACnB2G,EAAMD,kBACNhH,EnBzEC,SAAyBM,GAC9B,MAAO,CACLpB,KAAMP,EACNW,QAAS,CACPgB,OAAQA,GAEVnB,OAAO,GmBmEI6E,CAAyB1D,KAEpC6F,WAAY,SAAC7F,EAAQsH,EAAcxE,GACjCuE,GAAqB3H,EAAU4H,EAActH,GAC7CN,ElBtEC,SAA2BM,EAAQ8C,GACxC,MAAO,CACLlE,KAAMK,EACND,QAAS,CACPgB,OAAQA,EACR8C,WAAYA,GAEdjE,OAAO,GkB+DI0I,CAA6BvH,EAAQ8C,OAK9BqB,CAGpB6D,IE1FaC,GARA,SAAAzD,GAAA,IAAE/E,EAAF+E,EAAE/E,QAAS4D,EAAXmB,EAAWnB,UAAWT,EAAtB4B,EAAsB5B,WAAYsF,EAAlC1D,EAAkC0D,cAAlC,OACbpD,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIlE,GAAG,QAAP,eACAgE,EAAAC,EAAAC,cAAA,UAAQL,QAAS,kBACfuD,EAAczI,EAAS4D,EAAWT,KADpC,YCuBWuF,GALQhE,YAjBC,SAAC3B,GAGvB,MAAO,CACL/C,QAAS+C,EAAMiB,GAAGhE,QAClB4D,UAAWb,EAAMa,UAAWT,WAAYJ,EAAMI,aAIvB,SAAClD,GAC1B,MAAO,CACLwI,cAAe,SAACzI,EAAS4D,EAAWT,GAClClD,EtBmFC,SAAkBD,EAAS4D,EAAWT,GAC3C,OAAO,SAASlD,GACdA,EAASZ,EAAYc,IACrBC,MAAMzB,EAAI,iBAAkB,CAC1BgK,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBhJ,QAASA,EACTmD,WAAYA,EACZS,UAAWA,MAEZvD,KACC,kBAAMJ,EAASZ,EAAYc,OsBjGpB8I,CAASjJ,EAAS4D,EAAWT,OAKrBuB,CAGrB8D,ICQaU,4LAdX,OACE7D,EAAAC,EAAAC,cAAC4D,EAAA,wBAAD,CAAyBC,QAASC,KAChChE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+D,GAAD,MACAjE,EAAAC,EAAAC,cAAA,OAAKlE,GAAG,cACNgE,EAAAC,EAAAC,cAACgE,EAAD,MACAlE,EAAAC,EAAAC,cAACiE,GAAD,gBAZMC,cCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,GCES,WACb,IAAMA,EAAQC,sBAAYnH,EAAKuB,EAAc6F,0BACzCC,IACAC,MAGEC,EAAaL,EAAMM,UAAU,cAUnC,OALAN,EAAM9J,SAASF,EAAW,IAI1BqK,IACOL,EDlBKO,GACdC,IAASC,OAAOnF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAUV,MAAOA,IAAO1E,EAAAC,EAAAC,cAACmF,GAAD,OACpCC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1K,KAAK,SAAA2K,GACjCA,EAAaC","file":"static/js/main.5f7de440.chunk.js","sourcesContent":["export const IS_FETCHING = 'IS_FETCHING';\nexport const IS_SENDING = 'IS_SENDING';\nexport const DID_INVALIDATE = 'DID_INVALIDATE';\nexport const SUCCESS = 'SUCCESS';\nexport const FAILURE = 'FAILURE';\n","export default 'http://83.212.97.237:8090';\n","import * as responseStatus from '../staticContent/responseStatus';\nimport api from './api';\n\nexport const SHOW_DESCRICTION = 'SHOW_DESCRIPTION';\nexport const HIDE_ALL_DESCRIPTIONS = 'HIDE_ALL_DESCRIPTIONS';\nexport const SHOW_TITLE_BOX = 'SHOW_TITLE_BOX';\nexport const HIDE_ALL_BOXES = 'HIDE_ALL_BOXES';\nexport const SAVE_STUDY_ID = 'SAVE_STUDY_ID';\nexport const SENDING_SORT = 'SENDING_SORT';\n\n/**\n * Shows the description of a specified card\n * @param {int} cardID the id of the card that the description will be thrown\n * @return {JSON} the action\n */\nexport function showDescription(cardID) {\n  return {\n    type: SHOW_DESCRICTION,\n    payload: {\n      cardID: cardID,\n    },\n    error: false,\n  };\n}\n\n/**\n * Hides the pop up description, it makes sure that none is shown.\n * @return {JSON} the action\n */\nexport function hideAllDescriptions() {\n  return {\n    type: HIDE_ALL_DESCRIPTIONS,\n    error: false,\n  };\n}\n\n/**\n * Shows the textbox of the category, so the user can change the title.\n * @param {Number} categoryID\n * @return {JSON} the action\n */\nexport function showTitleBoxOnCategory(categoryID) {\n  return {\n    type: SHOW_TITLE_BOX,\n    payload: {\n      categoryID: categoryID,\n    },\n    error: false,\n  };\n}\n\n/**\n * Hides all the textboxes.\n * @return {JSON} the action\n */\nexport function hideAllTitleBoxes() {\n  return {\n    type: HIDE_ALL_BOXES,\n    error: false,\n  };\n}\n\n/**\n * Saves the Study id for future reference\n * @param {Number} studyID\n * @return {JSON} the action\n */\nexport function saveStudyID(studyID) {\n  return {\n    type: SAVE_STUDY_ID,\n    payload: {\n      studyID: studyID,\n    },\n    error: false,\n  };\n}\n\n/**\n * Saves the status of the send request\n * @param {ResponseStatus} status\n * @return {JSON} the action\n */\nexport function sendingSort(status) {\n  return {\n    type: SENDING_SORT,\n    payload: {\n      status: status,\n    },\n    error: false,\n  };\n}\n\n/* Thunk actions */\n\n/**\n *\n * @param {Number} studyID\n * @param {Number[]} container\n * @param {Category[]} categories\n * @return {function}\n */\nexport function sendSort(studyID, container, categories) {\n  return function(dispatch) {\n    dispatch(sendingSort(responseStatus.IS_SENDING));\n    fetch(api+'/sort_endpoint', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        studyID: studyID,\n        categories: categories,\n        container: container,\n      }),\n    }).then(\n        () => dispatch(sendingSort(responseStatus.SUCCESS))\n    );\n  };\n}\n","import fetch from 'cross-fetch';\nimport * as responseStatus from '../staticContent/responseStatus';\nimport {saveStudyID} from './uiAction';\nimport debugConsole from '../debug/Debugconsole';\nimport api from './api';\n\nexport const IMPORT_CARD = 'IMPORT_CARD';\nexport const ADD_CARD_CATEGORY = 'ADD_CARD_CATEGORY';\nexport const REMOVE_CARD_CATEGORY = 'REMOVE_CARD_CATEGORY';\nexport const ADD_CARD_CONTAINER = 'ADD_CARD_CONTAINER';\nexport const REMOVE_CARD_CONTAINER = 'REMOVE_CARD_CONTAINER';\n\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\n\n// Action creators //\n\n/**\n *\n * @param {int} cardID\n * @param {int} categoryID\n * @return {JSON} the action\n */\nexport function addCardToCategory(cardID, categoryID) {\n  return {\n    type: ADD_CARD_CATEGORY,\n    payload: {\n      cardID: cardID,\n      categoryID: categoryID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {int} cardID\n * @param {int} categoryID\n * @return {JSON} the action\n */\nexport function removeCardFromCategory(cardID, categoryID) {\n  return {\n    type: REMOVE_CARD_CATEGORY,\n    payload: {\n      cardID: cardID,\n      categoryID: categoryID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {int} cardID\n * @return {JSON} the action\n */\nexport function addCardToContainer(cardID) {\n  return {\n    type: ADD_CARD_CONTAINER,\n    payload: {\n      cardID: cardID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {int} cardID\n * @return {JSON} the action\n */\nexport function removeCardFromContainer(cardID) {\n  return {\n    type: REMOVE_CARD_CONTAINER,\n    payload: {\n      cardID: cardID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {responseStatus} status\n * @param {JSON} response\n * @param {String} error\n * @return {JSON} the action\n */\nexport function requestCards(status, response, error) {\n  return {\n    type: REQUEST_CARDS,\n    payload: {\n      status: status,\n      response: response,\n      error: error,\n    },\n  };\n}\n\n/* Thunk actions */\n\n/**\n *\n * @param {Number} studyID\n * @return {function}\n */\nexport function fetchCards(studyID) {\n  return function(dispatch) {\n    dispatch(saveStudyID(studyID));\n    dispatch(requestCards(responseStatus.IS_FETCHING));\n\n    fetch(api+'/sort_endpoint?cards=true&study_id='+studyID)\n        .then(\n            (response) => response.json().then((json) =>{\n              // Load the cards\n              dispatch(requestCards(responseStatus.SUCCESS, json));\n              // Show the cards\n              for (const card of json.cards) {\n                dispatch(addCardToContainer(card.id));\n              }\n            }),\n            (error) => debugConsole(error)\n        );\n  };\n}\n\n","/**\n * Used to print messages and other debug data to the console.\n * @param {*} params\n */\nexport default function debugConsole(...args) {\n  console.log(args);\n}\n","export const CREATE_CATEGORY = 'CREATE_CATEGORY';\nexport const REMOVE_CATEGORY = 'REMOVE_CATEGORY';\nexport const RENAME_CATEGORY = 'RENAME_CATEGORY';\n\n/**\n *\n * @param {int} categoryID\n * @param {string} title\n * @param {int} cardID\n * @return {JSON} the action\n */\nexport function createCategory(categoryID, title, cardID) {\n  return {\n    type: CREATE_CATEGORY,\n    payload: {\n      categoryID: categoryID,\n      title: title,\n      cardID: cardID,\n    },\n    error: false,\n  };\n}\n\n/**\n *\n * @param {int} categoryID\n * @return {JSON} the action\n */\nexport function removeCategory(categoryID) {\n  return {\n    type: REMOVE_CATEGORY,\n    payload: {\n      categoryID: categoryID,\n    },\n  };\n}\n\n/**\n *\n * @param {Number} categoryID\n * @param {Title} title\n * @return {JSON}\n */\nexport function renameCategory(categoryID, title) {\n  return {\n    type: RENAME_CATEGORY,\n    payload: {\n      categoryID: categoryID,\n      title: title,\n    },\n    error: false,\n  };\n}\n","/**\n * Represents the data model of the category\n */\nexport default class Category {\n  /**\n   *\n   * @param {int} id\n   * @param {String} title\n   */\n  constructor(id, title) {\n    this.id = id;\n    this.title = title;\n    this.cards = [];\n  }\n\n  /**\n   *\n   * @param {int} cardId\n   */\n  addCard(cardId) {\n    this.cards.push(cardId);\n  }\n\n  /**\n   *\n   * @param {int} cardId\n   */\n  removeCard(cardId) {\n    this.cards = this.cards.filter((id)=> {\n      return id !== cardId;\n    });\n  }\n}\n","/**\n * Static holder for the cards\n */\nexport default [];\n","import {combineReducers} from 'redux';\nimport containerReducer from './containerReducer';\nimport categoriesReducer from './categoriesReducer';\nimport uiReducer from './uiReducer';\nimport cardReducer from './cardReducer';\n\nconst app = combineReducers({\n  cards: cardReducer,\n  categories: categoriesReducer,\n  container: containerReducer,\n  ui: uiReducer,\n});\n\nexport default app;\n","import * as cardActions from '../actions/cardAction';\n\nimport cards from '../staticContent/cards';\n\n/**\n *\n * @param {boardState} state\n * @param {cardActions} action\n * @return {boardState}\n */\nexport default function card(state={}, action) {\n  switch (action.type) {\n    case cardActions.REQUEST_CARDS: {\n      const response = action.payload.response;\n      if (response) {\n        for (const card of response.cards) {\n          cards.push(card);\n        }\n      }\n      return Object.assign({}, state, {\n        'status': action.payload.status,\n      });\n    }\n    default:\n      return state;\n  }\n}\n","import * as cardActions from '../actions/cardAction';\nimport * as categoryAction from '../actions/categoryAction';\nimport Category from '../elements/Category';\n\n/**\n *\n * @param {boardState} state\n * @param {cardActions} action\n * @return {boardState}\n */\nexport default function categories(state={}, action) {\n  switch (action.type) {\n    case categoryAction.CREATE_CATEGORY: {\n      const id = action.payload.categoryID || Date.now();\n      const category = new Category(id, action.payload.title);\n      category.addCard(action.payload.cardID);\n\n      const newState = Object.assign({}, state);\n      newState[id] = category;\n      return newState;\n    }\n    case categoryAction.REMOVE_CATEGORY: {\n      const categoryID = action.payload.categoryID;\n      const newState = Object.assign({}, state);\n\n      delete newState[categoryID];\n      return newState;\n    }\n    case categoryAction.RENAME_CATEGORY: {\n      const id = action.payload.categoryID;\n      const newState = Object.assign({}, state);\n\n      newState[id].title = action.payload.title;\n      return newState;\n    }\n    case cardActions.ADD_CARD_CATEGORY: {\n      const cardID = action.payload.cardID;\n      const categoryID = action.payload.categoryID;\n      const newState = Object.assign({}, state);\n\n      newState[categoryID].addCard(cardID);\n      return newState;\n    }\n    case cardActions.REMOVE_CARD_CATEGORY: {\n      const cardID = action.payload.cardID;\n      const categoryID = action.payload.categoryID;\n      const newState = Object.assign({}, state);\n\n      newState[categoryID].removeCard(cardID);\n      return newState;\n    }\n    default:\n      return state;\n  }\n}\n","import * as cardActions from '../actions/cardAction';\n\n/**\n *\n * @param {boardState} state\n * @param {ReduxAction} action\n * @return {boardState}\n */\nexport default function container(state={}, action) {\n  switch (action.type) {\n    case cardActions.ADD_CARD_CONTAINER: {\n      return [\n        ...state,\n        action.payload.cardID,\n      ];\n    }\n    case cardActions.REMOVE_CARD_CONTAINER: {\n      return [...state].filter((x) => x !== action.payload.cardID);\n    }\n    default:\n      return state;\n  }\n}\n","import * as uiAction from '../actions/uiAction';\n\n/**\n *\n * @param {BoardState} state\n * @param {UIAction} action\n * @return {BoardState}\n */\nexport default function ui(state={}, action) {\n  switch (action.type) {\n    case uiAction.SHOW_DESCRICTION: {\n      return Object.assign({}, state, {\n        'showingDescription': action.payload.cardID,\n      });\n    }\n    case uiAction.HIDE_ALL_DESCRIPTIONS: {\n      return Object.assign({}, state, {\n        'showingDescription': undefined,\n      });\n    }\n    case uiAction.SHOW_TITLE_BOX: {\n      return Object.assign({}, state, {\n        'changeTitle': action.payload.categoryID,\n      });\n    }\n    case uiAction.HIDE_ALL_BOXES: {\n      return Object.assign({}, state, {\n        'changeTitle': undefined,\n      });\n    }\n    case uiAction.SAVE_STUDY_ID: {\n      return Object.assign({}, state, {\n        'studyID': action.payload.studyID,\n      });\n    }\n    case uiAction.SENDING_SORT: {\n      return Object.assign({}, state, {\n        'sendingSort': action.payload.status,\n      });\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","const initialState = {\n  cards: {\n    status: undefined,\n  },\n  container: [],\n  categories: {\n    /* CategoryId: Category */\n  },\n  ui: {\n    changeTitle: undefined,\n    showingDescription: undefined,\n    studyID: undefined,\n    sendingSort: undefined,\n  },\n};\n\nexport default initialState;\n","export const itemTypes = {\n  CARD: 'card-drag',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {DragSource} from 'react-dnd';\n\nimport {itemTypes} from '../../staticContent/dragConstants';\n\n\nconst cardSource = {\n  beginDrag(props) {\n    return {id: props.id, position: props.position};\n  },\n};\n\n/**\n *\n * @param {*} connect\n * @param {*} monitor\n * @return {*}\n */\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  };\n}\n\n\nconst CardItem = ({id, title, description, minimized, position,\n  onClick, showDescription, connectDragSource, isDragging}) => {\n  const classString = minimized ? 'card minimized' : 'card';\n  return connectDragSource(\n      <li className={classString}>\n        <h4>{title}</h4>\n        {\n          /* Hide the description */\n          !minimized && <p>{description}</p>\n        }\n        {\n          /* Show the description button */\n          minimized &&\n            <div className=\"desc-container\">\n              <button onClick={onClick} className=\"desc-btn\">\n                ?\n              </button>\n              {\n                showDescription &&\n                <div className=\"desc-pop\">\n                  <p>\n                    {description}\n                  </p>\n                </div>\n              }\n            </div>\n        }\n      </li>);\n};\n\nCardItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  minimized: PropTypes.bool,\n  position: PropTypes.number.isRequired,\n  onClick: PropTypes.func,\n  showDescription: PropTypes.bool,\n};\n\n\nexport default DragSource(itemTypes.CARD, cardSource, collect)(CardItem);\n","import React from 'react';\nimport CardItem from './CardItem.jsx';\n\nconst Container = ({cards}) => (\n  <ul id='container'>\n    {\n      cards.map((card) => (\n        <CardItem key={card.id} id={card.id} title={card.title}\n          description={card.description} position={-1} />\n      ))\n    }\n  </ul>\n);\n\n// TODO\n// Container.protoTypes = {\n//   cards: PropTypes.arrayOf(\n//   )\n// }\n\nexport default Container;\n","import cards from '../staticContent/cards';\n\n/**\n * Parses the card's id and returns the real objects\n * @param {cardID[]} cardIDs\n * @return {card[]} the corresponding objects\n */\nexport default function parseCards(cardIDs) {\n  // Add the card item based on it's id\n  const cardsArr = [];\n  for (const cardID of cardIDs) {\n    cardsArr.push(cards[cardID]);\n  }\n  return {\n    cards: cardsArr,\n  };\n}\n","import {connect} from 'react-redux';\nimport Container from '../components/Container.jsx';\nimport parseCards from '../../helpers/cardParser';\n\n\nconst mapStateToProps = (state) => {\n  return parseCards(state.container);\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nconst PopulateContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Container);\n\nexport default PopulateContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {DropTarget} from 'react-dnd';\n\nimport {itemTypes} from '../../staticContent/dragConstants';\nimport CardItem from './CardItem.jsx';\nimport parseCards from '../../helpers/cardParser';\n\nconst categoryTarget = {\n  drop(props, monitor) {\n    const card = monitor.getItem();\n    props.onCardDrop(card.id, card.position, props.id);\n  },\n};\n\n/**\n *\n * @param {*} connect\n * @param {*} monitor\n * @return {*}\n */\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n  };\n}\n\nconst CategoryItem = ({id, title, cards, onClick, showTitleBox,\n  onCardDrop, onTitleClick, onTitleChange, onTitleFinish,\n  descriptionID, connectDropTarget, isOver}) => {\n  cards = parseCards(cards).cards;\n  return connectDropTarget(\n      <li className='category'>\n        {\n          showTitleBox &&\n          <input type='text' defaultValue={title}\n            onChange={(e)=>onTitleChange(e, id)}\n            onKeyPress={(e)=>onTitleFinish(e)}\n            onClick={(e)=>e.stopPropagation()}></input>\n        }\n        {\n          !showTitleBox &&\n          <h3 onClick={(e)=>onTitleClick(e, id)}>{title}</h3>\n        }\n        <ul>{\n          cards.map((card) => (\n            <CardItem key={card.id} id={card.id} title={card.title}\n              description={card.description} minimized={true}\n              position={id}\n              onClick={(event) => onClick(event, card.id)}\n              showDescription={card.id===descriptionID}/>\n          ))\n        }</ul>\n      </li>\n  );\n};\n\nCategoryItem.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default DropTarget(itemTypes.CARD,\n    categoryTarget, collect)(CategoryItem);\n","import React from 'react';\nimport {DropTarget} from 'react-dnd';\n\nimport {itemTypes} from '../../staticContent/dragConstants';\nimport CategoryItem from './CategoryItem';\n\nconst boardTarget = {\n  drop(props, monitor) {\n    if (!monitor.didDrop()) {\n      const card = monitor.getItem();\n      // Handle the drop only if a category did not handle it first\n      props.onDrop(card.id, card.position);\n    }\n    props.removeEmptyCategories(props.categories);\n  },\n};\n\n/**\n *\n * @param {*} connect\n * @param {*} monitor\n * @return {*}\n */\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n  };\n}\n\nconst Board = ({categories, onClick, onCardClick, onCategTitleClick,\n  changeTitleID, onCardDrop, onDrop, descriptionID, onCategTitleChange,\n  onCategTitleFinish, removeEmptyCategories, connectDropTarget, isOver}) => {\n  categories = categories.map((category) => (\n    <CategoryItem key={'k' + category.id} id={category.id}\n      title={category.title} cards={category.cards} onClick={onCardClick}\n      onTitleChange={onCategTitleChange}\n      onTitleClick={onCategTitleClick} onCardDrop={onCardDrop}\n      onTitleFinish={onCategTitleFinish}\n      showTitleBox={category.id === changeTitleID}\n      descriptionID={descriptionID}/>\n  ));\n\n  return connectDropTarget(<ul id='board' onClick={onClick}>\n    {\n      categories\n    }\n  </ul>);\n};\n\n// TODO\n// Board.protoTypes = {\n//   cards: PropTypes.arrayOf(\n//   )\n// }\n\n\nexport default DropTarget(itemTypes.CARD,\n    boardTarget, collect)(Board);\n","import {connect} from 'react-redux';\n\nimport Board from '../components/Board.jsx';\nimport * as uiAction from '../../actions/uiAction';\nimport * as cardAction from '../../actions/cardAction';\nimport * as categoryAction from '../../actions/categoryAction';\n\nimport * as text from '../../localization/text';\n\n/**\n * Removes the card with the given id from it's current parent\n * @param {function} dispatch\n * @param {Number} cardPosition\n * @param {Number} cardID\n */\nfunction removeCardFromParent(dispatch, cardPosition, cardID) {\n  if (cardPosition === -1) {\n    // The card is in the main container\n    dispatch(cardAction.removeCardFromContainer(cardID));\n  } else\n  if (cardPosition > -1) {\n    // The card belongs to a category and it is being moved to a\n    // new one\n    dispatch(cardAction.removeCardFromCategory(cardID, cardPosition));\n  }\n}\n\n/**\n * Looks for an empty category and removes it from the state\n * @param {function} dispatch\n * @param {Category[]} categories\n */\nfunction deleteEmptyCategories(dispatch, categories) {\n  for (const i in categories) {\n    if (categories[i].cards.length < 1) {\n      // Only one category can be empty on each state update\n      dispatch(categoryAction.removeCategory(categories[i].id));\n      break;\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  // Convert to array\n  const categories = Object.values(state.categories);\n  const showingDescription = state.ui['showingDescription'];\n  const changeTitle = state.ui['changeTitle'];\n\n  return {categories: categories, descriptionID: showingDescription,\n    changeTitleID: changeTitle};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onClick: () => {\n      // Hide the descriptions and category renaming on user click\n      dispatch(uiAction.hideAllDescriptions());\n      dispatch(uiAction.hideAllTitleBoxes());\n    },\n    onDrop: (cardID, cardPosition) => {\n      // This is *only* executed only if the OnCardDrop didn't\n      // Create the new category, containing the dropped card\n      removeCardFromParent(dispatch, cardPosition, cardID);\n      dispatch(categoryAction.createCategory(undefined,\n          text.categoryTitle(), cardID));\n    },\n    removeEmptyCategories: (categories) => {\n      // This is triggered on every drop on the Board\n      deleteEmptyCategories(dispatch, categories);\n    },\n    onCategTitleClick: (event, categoryID) => {\n      event.stopPropagation();\n      dispatch(uiAction.showTitleBoxOnCategory(categoryID));\n    },\n    onCategTitleChange: (event, categoryID) => {\n      let title = event.target.value;\n      title = title.replace(/\\s\\s+/g, ' ').trim();\n      title = (title.length > 0) ? title : text.categoryTitle();\n      dispatch(categoryAction.renameCategory(categoryID, title));\n    },\n    onCategTitleFinish: (event) => {\n      event.stopPropagation();\n      if (event.charCode === 13) {\n        dispatch(uiAction.hideAllTitleBoxes());\n      }\n    },\n    onCardClick: (event, cardID) => {\n      event.stopPropagation();\n      dispatch(uiAction.showDescription(cardID));\n    },\n    onCardDrop: (cardID, cardPosition, categoryID) => {\n      removeCardFromParent(dispatch, cardPosition, cardID);\n      dispatch(cardAction.addCardToCategory(cardID, categoryID));\n    },\n  };\n};\n\nconst PopulateBoard = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Board);\n\nexport default PopulateBoard;\n","/**\n * The default title of a category\n * @return {String} the title on the proper language\n */\nexport function categoryTitle() {\n  return 'Click here to rename';\n};\n\n","import React from 'react';\n\nconst Header = ({studyID, container, categories, onFinishClick}) => (\n  <header>\n    <h1 id=\"logo\">Card Sorter</h1>\n    <button onClick={() =>\n      onFinishClick(studyID, container, categories)}>Finish</button>\n  </header>\n);\n\nexport default Header;\n","import {connect} from 'react-redux';\n\nimport Header from '../components/Header.jsx';\nimport {sendSort} from '../../actions/uiAction';\n\n\nconst mapStateToProps = (state) => {\n  // The state is updated so the component knows what to send on finish\n  // TODO: This may not be a very good solution\n  return {\n    studyID: state.ui.studyID,\n    container: state.container, categories: state.categories,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFinishClick: (studyID, container, categories) => {\n      dispatch(sendSort(studyID, container, categories));\n    },\n  };\n};\n\nconst PopulateHeader = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Header);\n\nexport default PopulateHeader;\n","import 'babel-polyfill'; // Ensure all polyfills are present\n\nimport React, {Component} from 'react';\nimport {DragDropContextProvider} from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\nimport PopulateContainer from './elements/containers/PopulateContainer.jsx';\nimport PopulateBoard from './elements/containers/PopulateBoard.jsx';\nimport PopulateHeader from './elements/containers/PopulateHeader.jsx';\nimport './App.css';\n\n/**\n * App route\n */\nclass App extends Component {\n  /**\n   * React render\n   * @return {Component}\n   */\n  render() {\n    return (\n      <DragDropContextProvider backend={HTML5Backend}>\n        <div className=\"App\">\n          <PopulateHeader />\n          <div id=\"main-panel\">\n            <PopulateContainer />\n            <PopulateBoard />\n          </div>\n        </div>\n      </DragDropContextProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport initializeStore from './Store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = initializeStore();\nReactDOM.render(<Provider store={store}><App /></Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {applyMiddleware, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport app from './reducers/indexReducer';\nimport initialState from './reducers/boardState';\nimport {fetchCards} from './actions/cardAction';\n\n/**\n * @return {Store}\n */\nexport default function initializeStore() {\n  const store = createStore(app, initialState, applyMiddleware(\n      thunkMiddleware,\n      logger));\n  // const store = createStore(app, window.STATE_FROM_SERVER);\n\n  const unsuscribe = store.subscribe(() => {});\n  // () => debugConsole(store.getState())\n  // runTest(store);\n\n  // Load the cards\n  store.dispatch(fetchCards(1));\n\n  // debugConsole(store.getState());\n\n  unsuscribe();\n  return store;\n}\n"],"sourceRoot":""}